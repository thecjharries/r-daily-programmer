{"kind": "Listing", "data": {"after": "t3_aqwvxo", "dist": 25, "modhash": "n52f3p1r7m753409643b322aab6ef70a646b8e90363b6ae9c9", "geo_filter": null, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Example\n\nConsider this 5x5 matrix of numbers:\n\n    123456789   752880530   826085747  576968456   721429729\n    173957326   1031077599  407299684  67656429    96549194\n    1048156299  663035648   604085049  1017819398  325233271\n    942914780   664359365   770319362  52838563    720059384\n    472459921   662187582   163882767  987977812   394465693\n\nIf you select 5 elements from this matrix such that no two elements come from the same row or column, what is the smallest possible sum? The answer in this case is 1099762961 (123456789 + 96549194 + 663035648 + 52838563 + 163882767).\n\n# Challenge\n\nFind the minimum such sum when selecting 20 elements (one from each row and column) of [this 20x20 matrix](https://gist.githubusercontent.com/cosmologicon/4f6473b4e781f20d4bdef799132a3b4b/raw/d518a7515618f70d25c2bc6c58430f732f6e06ce/matrix-sum-20.txt). The answer is a 10-digit number whose digits sum to 35.\n\nThere's no strict runtime requirement, but you must actually run your program all the way through to completion and get the right answer in order to qualify as a solution: a program that will eventually give you the answer is not sufficient.\n\n# Optional Bonus\n\nWhat's the smallest sum you can find for [this 97x97 matrix](https://gist.githubusercontent.com/cosmologicon/641583595e2c76d7c119912f7afafbfe/raw/6f9ebcb354c3aa58fb19c6f4208d0eced310b62a/matrix-sum-97.txt)? It's okay to give a result that's not optimal in this case. If you want to prove that you found a certain sum, you can you post the indices of each element you selected from each row in order. For the 5x5 example, for instance, you could post `[0,4,1,3,2]`.\n\n*(This challenge is a repost of [Challenge #67 [difficult]](https://www.reddit.com/r/dailyprogrammer/comments/vbr56/6202012_challenge_67_difficult/), originally posted by u/oskar_s in June 2012. See that post for the formula to algorithmically generate the matrices if you prefer to do it that way.)*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-07-12] Challenge #398 [Difficult] Matrix Sum", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_oirb5v", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 102, "total_awards_received": 2, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 102, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {"gid_1": 1}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1626096730.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Example&lt;/h1&gt;\n\n&lt;p&gt;Consider this 5x5 matrix of numbers:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;123456789   752880530   826085747  576968456   721429729\n173957326   1031077599  407299684  67656429    96549194\n1048156299  663035648   604085049  1017819398  325233271\n942914780   664359365   770319362  52838563    720059384\n472459921   662187582   163882767  987977812   394465693\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you select 5 elements from this matrix such that no two elements come from the same row or column, what is the smallest possible sum? The answer in this case is 1099762961 (123456789 + 96549194 + 663035648 + 52838563 + 163882767).&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;Find the minimum such sum when selecting 20 elements (one from each row and column) of &lt;a href=\"https://gist.githubusercontent.com/cosmologicon/4f6473b4e781f20d4bdef799132a3b4b/raw/d518a7515618f70d25c2bc6c58430f732f6e06ce/matrix-sum-20.txt\"&gt;this 20x20 matrix&lt;/a&gt;. The answer is a 10-digit number whose digits sum to 35.&lt;/p&gt;\n\n&lt;p&gt;There&amp;#39;s no strict runtime requirement, but you must actually run your program all the way through to completion and get the right answer in order to qualify as a solution: a program that will eventually give you the answer is not sufficient.&lt;/p&gt;\n\n&lt;h1&gt;Optional Bonus&lt;/h1&gt;\n\n&lt;p&gt;What&amp;#39;s the smallest sum you can find for &lt;a href=\"https://gist.githubusercontent.com/cosmologicon/641583595e2c76d7c119912f7afafbfe/raw/6f9ebcb354c3aa58fb19c6f4208d0eced310b62a/matrix-sum-97.txt\"&gt;this 97x97 matrix&lt;/a&gt;? It&amp;#39;s okay to give a result that&amp;#39;s not optimal in this case. If you want to prove that you found a certain sum, you can you post the indices of each element you selected from each row in order. For the 5x5 example, for instance, you could post &lt;code&gt;[0,4,1,3,2]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(This challenge is a repost of &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/vbr56/6202012_challenge_67_difficult/\"&gt;Challenge #67 [difficult]&lt;/a&gt;, originally posted by &lt;a href=\"/u/oskar_s\"&gt;u/oskar_s&lt;/a&gt; in June 2012. See that post for the formula to algorithmically generate the matrices if you prefer to do it that way.)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "gid_1", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_width": 512, "static_icon_width": 512, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Shows the Silver Award... and that's it.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 512, "name": "Silver", "resized_static_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_format": null, "icon_height": 512, "penny_price": null, "award_type": "global", "static_icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png"}, {"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 80, "id": "award_8352bdff-3e03-4189-8a08-82501dd8f835", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=16&amp;height=16&amp;auto=webp&amp;s=73a23bf7f08b633508dedf457f2704c522b94a04", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=32&amp;height=32&amp;auto=webp&amp;s=50f2f16e71d2929e3d7275060af3ad6b851dbfb1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=48&amp;height=48&amp;auto=webp&amp;s=ca487311563425e195699a4d7e4c57a98cbfde8b", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=64&amp;height=64&amp;auto=webp&amp;s=7b4eedcffb1c09a826e7837532c52979760f1d2b", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=128&amp;height=128&amp;auto=webp&amp;s=e4d5ab237eb71a9f02bb3bf9ad5ee43741918d6c", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Everything is better with a good hug", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Hugz", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=16&amp;height=16&amp;auto=webp&amp;s=69997ace3ef4ffc099b81d774c2c8f1530602875", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=32&amp;height=32&amp;auto=webp&amp;s=e9519d1999ef9dce5c8a9f59369cb92f52d95319", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=48&amp;height=48&amp;auto=webp&amp;s=f076c6434fb2d2f9075991810fd845c40fa73fc6", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=64&amp;height=64&amp;auto=webp&amp;s=85527145e0c4b754306a30df29e584fd16187636", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=128&amp;height=128&amp;auto=webp&amp;s=b8843cdf82c3b741d7af057c14076dcd2621e811", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png"}], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "oirb5v", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 22, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/oirb5v/20210712_challenge_398_difficult_matrix_sum/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/oirb5v/20210712_challenge_398_difficult_matrix_sum/", "subreddit_subscribers": 224296, "created_utc": 1626096730.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "For the purpose of today's challenge, a Roman numeral is a non-empty string of the characters `M`, `D`, `C`, `L`, `X`, `V`, and `I`, each of which has the value 1000, 500, 100, 50, 10, 5, and 1. The characters are arranged in descending order, and the total value of the numeral is the sum of the values of its characters. For example, the numeral `MDCCXXVIIII` has the value 1000 + 500 + 2x100 + 2x10 + 5 + 4x1 = 1729.\n\nThis challenge uses only additive notation for roman numerals. There's also subtractive notation, where 9 would be written as `IX`. You don't need to handle subtractive notation (but you can if you want to, as an optional bonus).\n\nGiven two Roman numerals, return whether the first one is less than the second one:\n\n    numcompare(\"I\", \"I\") =&gt; false\n    numcompare(\"I\", \"II\") =&gt; true\n    numcompare(\"II\", \"I\") =&gt; false\n    numcompare(\"V\", \"IIII\") =&gt; false\n    numcompare(\"MDCLXV\", \"MDCLXVI\") =&gt; true\n    numcompare(\"MM\", \"MDCCCCLXXXXVIIII\") =&gt; false\n\nYou only need to correctly handle the case where there are at most 1 each of `D`, `L`, and `V`, and at most 4 each of `C`, `X`, and `I`. You don't need to validate the input, but you can if you want. Any behavior for invalid inputs like `numcompare(\"V\", \"IIIIIIIIII\")` is fine - true, false, or error.\n\nTry to complete the challenge without actually determining the numerical values of the inputs.\n\n*(This challenge is a repost of [Challenge #66 [Easy]](https://www.reddit.com/r/dailyprogrammer/comments/v89c4/6182012_challenge_66_easy/), originally posted by u/rya11111 in June 2012. [Roman numerals have appeared in several previous challenges.](https://www.reddit.com/r/dailyprogrammer/search/?q=roman%20numerals&amp;source=recent&amp;restrict_sr=1))*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-07-05] Challenge #397 [Easy] Roman numeral comparison", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_oe9qnb", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 111, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 111, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1625499595.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1625499024.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For the purpose of today&amp;#39;s challenge, a Roman numeral is a non-empty string of the characters &lt;code&gt;M&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, and &lt;code&gt;I&lt;/code&gt;, each of which has the value 1000, 500, 100, 50, 10, 5, and 1. The characters are arranged in descending order, and the total value of the numeral is the sum of the values of its characters. For example, the numeral &lt;code&gt;MDCCXXVIIII&lt;/code&gt; has the value 1000 + 500 + 2x100 + 2x10 + 5 + 4x1 = 1729.&lt;/p&gt;\n\n&lt;p&gt;This challenge uses only additive notation for roman numerals. There&amp;#39;s also subtractive notation, where 9 would be written as &lt;code&gt;IX&lt;/code&gt;. You don&amp;#39;t need to handle subtractive notation (but you can if you want to, as an optional bonus).&lt;/p&gt;\n\n&lt;p&gt;Given two Roman numerals, return whether the first one is less than the second one:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;numcompare(&amp;quot;I&amp;quot;, &amp;quot;I&amp;quot;) =&amp;gt; false\nnumcompare(&amp;quot;I&amp;quot;, &amp;quot;II&amp;quot;) =&amp;gt; true\nnumcompare(&amp;quot;II&amp;quot;, &amp;quot;I&amp;quot;) =&amp;gt; false\nnumcompare(&amp;quot;V&amp;quot;, &amp;quot;IIII&amp;quot;) =&amp;gt; false\nnumcompare(&amp;quot;MDCLXV&amp;quot;, &amp;quot;MDCLXVI&amp;quot;) =&amp;gt; true\nnumcompare(&amp;quot;MM&amp;quot;, &amp;quot;MDCCCCLXXXXVIIII&amp;quot;) =&amp;gt; false\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You only need to correctly handle the case where there are at most 1 each of &lt;code&gt;D&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, and &lt;code&gt;V&lt;/code&gt;, and at most 4 each of &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, and &lt;code&gt;I&lt;/code&gt;. You don&amp;#39;t need to validate the input, but you can if you want. Any behavior for invalid inputs like &lt;code&gt;numcompare(&amp;quot;V&amp;quot;, &amp;quot;IIIIIIIIII&amp;quot;)&lt;/code&gt; is fine - true, false, or error.&lt;/p&gt;\n\n&lt;p&gt;Try to complete the challenge without actually determining the numerical values of the inputs.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(This challenge is a repost of &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/v89c4/6182012_challenge_66_easy/\"&gt;Challenge #66 [Easy]&lt;/a&gt;, originally posted by &lt;a href=\"/u/rya11111\"&gt;u/rya11111&lt;/a&gt; in June 2012. &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/search/?q=roman%20numerals&amp;amp;source=recent&amp;amp;restrict_sr=1\"&gt;Roman numerals have appeared in several previous challenges.&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 150, "id": "award_f44611f1-b89e-46dc-97fe-892280b13b82", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Thank you stranger. Shows the award.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Helpful", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png"}], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "oe9qnb", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 49, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/oe9qnb/20210705_challenge_397_easy_roman_numeral/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/oe9qnb/20210705_challenge_397_easy_roman_numeral/", "subreddit_subscribers": 224296, "created_utc": 1625499024.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Scenario\n\nThis is a pretty common problem. You may have seen it before.\n\nYou work for a mobile phone developer known for their robust design. The marketing division is working on a slogan for the latest model: \"Able to survive a K-meter drop!\". They just need to know the largest possible whole number value of K they can truthfully claim. Someone has already dropped one from 101 meters up and it broke, so they know the largest possible value is somewhere between 0 and 100 inclusive.\n\nHere's where you come in. You must find the value of K such that a phone will not break if dropped from K meters, but will break if dropped from K+1 meters. For the purpose of this challenge, these tests are completely reliable, so a single test at both K and K+1 meters is enough to establish this. Also, as long as a phone survives the drop, it suffers no damage whatsoever and can be reused in subsequent tests. Also, dropping a phone that's already broken gives you no information.\n\nYour boss gives you a prototype and tells you to go rent the 100-meter tower nearby and find K. The tower owner needs to know how long you'll be renting the tower for, and you rent by the minute, so assuming each trial takes the same amount of time, you need to know the maximum number of trials you'll need, without knowing the value of K. You realize you'll need to rent it long enough to conduct 100 trials, one for each floor. This is because you need to conduct one trial 1 meter up, then 2 meters up, and so on up to 100. If you skip any, then it's possible you won't know the exact value of K before the phone breaks. And then if K = 100, this strategy will require 100 trials.\n\nYou tell your boss, who says it's too expensive to rent the tower for 100 tests. Your boss asks, what's the maximum number of trials you'll need if you have two phone prototypes? After some work, you find the answer is 14. Can you see how to find this number? There are many explanations online that can help, [like this one.](https://datagenetics.com/blog/july22012/index.html) Feel free to read up on this problem if you don't understand the general approach.\n\nIf you have three phones, you only need a maximum of 9 trials.\n\n# Challenge\n\nGiven N, the number of phone prototypes you have, and H, the maximum height that needs to be tested, determine the maximum number of trials required by an optimal strategy to determine K. \n\n    phonedrop(1, 100) =&gt; 100\n    phonedrop(2, 100) =&gt; 14\n    phonedrop(3, 100) =&gt; 9\n    phonedrop(1, 1) =&gt; 1\n    phonedrop(2, 456) =&gt; 30\n    phonedrop(3, 456) =&gt; 14\n    phonedrop(4, 456) =&gt; 11\n    phonedrop(2, 789) =&gt; 40\n    phonedrop(3, 789) =&gt; 17\n    phonedrop(4, 789) =&gt; 12\n\nYou should be able to at least handle values of H up to 999.\n\n# Optional bonus\n\nWith an unlimited number of phones (N = infinity), it takes a maximum of 27 trials to find K when H = 123456789. Find the smallest N such that `phonedrop(N, 123456789) = 27`.\n\n*(This challenge is a repost of [Challenge #68 [intermediate]](https://www.reddit.com/r/dailyprogrammer/comments/vfyj6/6222012_challenge_68_intermediate/), originally posted by u/rya11111 in June 2012.)*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-06-28] Challenge #395 [Intermediate] Phone drop", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_o9k0p0", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 71, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 71, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1624886044.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Scenario&lt;/h1&gt;\n\n&lt;p&gt;This is a pretty common problem. You may have seen it before.&lt;/p&gt;\n\n&lt;p&gt;You work for a mobile phone developer known for their robust design. The marketing division is working on a slogan for the latest model: &amp;quot;Able to survive a K-meter drop!&amp;quot;. They just need to know the largest possible whole number value of K they can truthfully claim. Someone has already dropped one from 101 meters up and it broke, so they know the largest possible value is somewhere between 0 and 100 inclusive.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s where you come in. You must find the value of K such that a phone will not break if dropped from K meters, but will break if dropped from K+1 meters. For the purpose of this challenge, these tests are completely reliable, so a single test at both K and K+1 meters is enough to establish this. Also, as long as a phone survives the drop, it suffers no damage whatsoever and can be reused in subsequent tests. Also, dropping a phone that&amp;#39;s already broken gives you no information.&lt;/p&gt;\n\n&lt;p&gt;Your boss gives you a prototype and tells you to go rent the 100-meter tower nearby and find K. The tower owner needs to know how long you&amp;#39;ll be renting the tower for, and you rent by the minute, so assuming each trial takes the same amount of time, you need to know the maximum number of trials you&amp;#39;ll need, without knowing the value of K. You realize you&amp;#39;ll need to rent it long enough to conduct 100 trials, one for each floor. This is because you need to conduct one trial 1 meter up, then 2 meters up, and so on up to 100. If you skip any, then it&amp;#39;s possible you won&amp;#39;t know the exact value of K before the phone breaks. And then if K = 100, this strategy will require 100 trials.&lt;/p&gt;\n\n&lt;p&gt;You tell your boss, who says it&amp;#39;s too expensive to rent the tower for 100 tests. Your boss asks, what&amp;#39;s the maximum number of trials you&amp;#39;ll need if you have two phone prototypes? After some work, you find the answer is 14. Can you see how to find this number? There are many explanations online that can help, &lt;a href=\"https://datagenetics.com/blog/july22012/index.html\"&gt;like this one.&lt;/a&gt; Feel free to read up on this problem if you don&amp;#39;t understand the general approach.&lt;/p&gt;\n\n&lt;p&gt;If you have three phones, you only need a maximum of 9 trials.&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;Given N, the number of phone prototypes you have, and H, the maximum height that needs to be tested, determine the maximum number of trials required by an optimal strategy to determine K. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;phonedrop(1, 100) =&amp;gt; 100\nphonedrop(2, 100) =&amp;gt; 14\nphonedrop(3, 100) =&amp;gt; 9\nphonedrop(1, 1) =&amp;gt; 1\nphonedrop(2, 456) =&amp;gt; 30\nphonedrop(3, 456) =&amp;gt; 14\nphonedrop(4, 456) =&amp;gt; 11\nphonedrop(2, 789) =&amp;gt; 40\nphonedrop(3, 789) =&amp;gt; 17\nphonedrop(4, 789) =&amp;gt; 12\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should be able to at least handle values of H up to 999.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus&lt;/h1&gt;\n\n&lt;p&gt;With an unlimited number of phones (N = infinity), it takes a maximum of 27 trials to find K when H = 123456789. Find the smallest N such that &lt;code&gt;phonedrop(N, 123456789) = 27&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(This challenge is a repost of &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/vfyj6/6222012_challenge_68_intermediate/\"&gt;Challenge #68 [intermediate]&lt;/a&gt;, originally posted by &lt;a href=\"/u/rya11111\"&gt;u/rya11111&lt;/a&gt; in June 2012.)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "o9k0p0", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 15, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/o9k0p0/20210628_challenge_395_intermediate_phone_drop/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/o9k0p0/20210628_challenge_395_intermediate_phone_drop/", "subreddit_subscribers": 224296, "created_utc": 1624886044.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "This challenge is inspired by [nonogram puzzles](https://en.wikipedia.org/wiki/Nonogram#Example), but you don't need to be familiar with these puzzles in order to complete the challenge.\n\nA binary array is an array consisting of only the values `0` and `1`. Given a binary array of any length, return an array of positive integers that represent the lengths of the sets of consecutive 1's in the input array, in order from left to right.\n\n    nonogramrow([]) =&gt; []\n    nonogramrow([0,0,0,0,0]) =&gt; []\n    nonogramrow([1,1,1,1,1]) =&gt; [5]\n    nonogramrow([0,1,1,1,1,1,0,1,1,1,1]) =&gt; [5,4]\n    nonogramrow([1,1,0,1,0,0,1,1,1,0,0]) =&gt; [2,1,3]\n    nonogramrow([0,0,0,0,1,1,0,0,1,0,1,1,1]) =&gt; [2,1,3]\n    nonogramrow([1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]) =&gt; [1,1,1,1,1,1,1,1]\n\nAs a special case, nonogram puzzles usually represent the empty output (`[]`) as `[0]`. If you prefer to do it this way, that's fine, but `0` should not appear in the output in any other case.\n\n*(This challenge is based on [Challenge #59 [intermediate]](https://www.reddit.com/r/dailyprogrammer/comments/uh03h/622012_challenge_59_intermediate/), originally posted by u/oskar_s in June 2012. Nonograms have been featured multiple times on r/dailyprogrammer since then ([search](https://www.reddit.com/r/dailyprogrammer/search?q=nonogram&amp;restrict_sr=1)).)*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-06-21] Challenge #395 [Easy] Nonogram row", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_o4uyzl", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 119, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 119, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1624281581.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This challenge is inspired by &lt;a href=\"https://en.wikipedia.org/wiki/Nonogram#Example\"&gt;nonogram puzzles&lt;/a&gt;, but you don&amp;#39;t need to be familiar with these puzzles in order to complete the challenge.&lt;/p&gt;\n\n&lt;p&gt;A binary array is an array consisting of only the values &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. Given a binary array of any length, return an array of positive integers that represent the lengths of the sets of consecutive 1&amp;#39;s in the input array, in order from left to right.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;nonogramrow([]) =&amp;gt; []\nnonogramrow([0,0,0,0,0]) =&amp;gt; []\nnonogramrow([1,1,1,1,1]) =&amp;gt; [5]\nnonogramrow([0,1,1,1,1,1,0,1,1,1,1]) =&amp;gt; [5,4]\nnonogramrow([1,1,0,1,0,0,1,1,1,0,0]) =&amp;gt; [2,1,3]\nnonogramrow([0,0,0,0,1,1,0,0,1,0,1,1,1]) =&amp;gt; [2,1,3]\nnonogramrow([1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]) =&amp;gt; [1,1,1,1,1,1,1,1]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As a special case, nonogram puzzles usually represent the empty output (&lt;code&gt;[]&lt;/code&gt;) as &lt;code&gt;[0]&lt;/code&gt;. If you prefer to do it this way, that&amp;#39;s fine, but &lt;code&gt;0&lt;/code&gt; should not appear in the output in any other case.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(This challenge is based on &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/uh03h/622012_challenge_59_intermediate/\"&gt;Challenge #59 [intermediate]&lt;/a&gt;, originally posted by &lt;a href=\"/u/oskar_s\"&gt;u/oskar_s&lt;/a&gt; in June 2012. Nonograms have been featured multiple times on &lt;a href=\"/r/dailyprogrammer\"&gt;r/dailyprogrammer&lt;/a&gt; since then (&lt;a href=\"https://www.reddit.com/r/dailyprogrammer/search?q=nonogram&amp;amp;restrict_sr=1\"&gt;search&lt;/a&gt;).)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "o4uyzl", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 97, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/o4uyzl/20210621_challenge_395_easy_nonogram_row/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/o4uyzl/20210621_challenge_395_easy_nonogram_row/", "subreddit_subscribers": 224296, "created_utc": 1624281581.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "If you're not familiar with some of the background topics for today's challenge, you'll need to do some reading on your own. Feel free to ask if you're lost, but try to figure it out yourself first. This is a difficult challenge.\n\nImplement the RSA key generation process following [the specification on Wikipedia](https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29#Key_generation), or some other similar specification. Randomly generate 256-bit or larger values for `p` and `q`, using [the Fermat primality test](https://en.wikipedia.org/wiki/Primality_test#Fermat_primality_test) or something similar. Use `e = 65537`. Provide functions to encrypt and decrypt a whole number representing a message, using your selected `n`. Verify that when you encrypt and then decrypt the input `12345`, you get `12345` back.\n\nIt's recommended that you use a large-number library for this challenge if your language doesn't support big integers.\n\n*(This is a repost of [Challenge #60 [difficult]](https://www.reddit.com/r/dailyprogrammer/comments/ukj67/642012_challenge_60_difficult/), originally posted by u/rya11111 in June 2012.)*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-06-14] Challenge #394 [Difficult] RSA encryption", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_nzmvsj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 99, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 99, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1623677574.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;If you&amp;#39;re not familiar with some of the background topics for today&amp;#39;s challenge, you&amp;#39;ll need to do some reading on your own. Feel free to ask if you&amp;#39;re lost, but try to figure it out yourself first. This is a difficult challenge.&lt;/p&gt;\n\n&lt;p&gt;Implement the RSA key generation process following &lt;a href=\"https://en.wikipedia.org/wiki/RSA_%28cryptosystem%29#Key_generation\"&gt;the specification on Wikipedia&lt;/a&gt;, or some other similar specification. Randomly generate 256-bit or larger values for &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;q&lt;/code&gt;, using &lt;a href=\"https://en.wikipedia.org/wiki/Primality_test#Fermat_primality_test\"&gt;the Fermat primality test&lt;/a&gt; or something similar. Use &lt;code&gt;e = 65537&lt;/code&gt;. Provide functions to encrypt and decrypt a whole number representing a message, using your selected &lt;code&gt;n&lt;/code&gt;. Verify that when you encrypt and then decrypt the input &lt;code&gt;12345&lt;/code&gt;, you get &lt;code&gt;12345&lt;/code&gt; back.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s recommended that you use a large-number library for this challenge if your language doesn&amp;#39;t support big integers.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(This is a repost of &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/ukj67/642012_challenge_60_difficult/\"&gt;Challenge #60 [difficult]&lt;/a&gt;, originally posted by &lt;a href=\"/u/rya11111\"&gt;u/rya11111&lt;/a&gt; in June 2012.)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "nzmvsj", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/nzmvsj/20210614_challenge_394_difficult_rsa_encryption/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/nzmvsj/20210614_challenge_394_difficult_rsa_encryption/", "subreddit_subscribers": 224296, "created_utc": 1623677574.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "The country of Examplania has coins that are worth 1, 5, 10, 25, 100, and 500 currency units. At the Zeroth Bank of Examplania, you are trained to make various amounts of money by using as many \u00a4500 coins as possible, then as many \u00a4100 coins as possible, and so on down.\n\nFor instance, if you want to give someone \u00a4468, you would give them four \u00a4100 coins, two \u00a425 coins, one \u00a410 coin, one \u00a45 coin, and three \u00a41 coins, for a total of 11 coins.\n\nWrite a function to return the number of coins you use to make a given amount of change.\n\n    change(0) =&gt; 0\n    change(12) =&gt; 3\n    change(468) =&gt; 11\n    change(123456) =&gt; 254\n\n*(This is a repost of [Challenge #65 [easy]](https://www.reddit.com/r/dailyprogrammer/comments/v3a89/6152012_challenge_65_easy/), originally posted by u/oskar_s in June 2012.)*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-06-07] Challenge #393 [Easy] Making change", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_nucsik", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 140, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 140, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1623076367.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1623073184.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The country of Examplania has coins that are worth 1, 5, 10, 25, 100, and 500 currency units. At the Zeroth Bank of Examplania, you are trained to make various amounts of money by using as many \u00a4500 coins as possible, then as many \u00a4100 coins as possible, and so on down.&lt;/p&gt;\n\n&lt;p&gt;For instance, if you want to give someone \u00a4468, you would give them four \u00a4100 coins, two \u00a425 coins, one \u00a410 coin, one \u00a45 coin, and three \u00a41 coins, for a total of 11 coins.&lt;/p&gt;\n\n&lt;p&gt;Write a function to return the number of coins you use to make a given amount of change.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;change(0) =&amp;gt; 0\nchange(12) =&amp;gt; 3\nchange(468) =&amp;gt; 11\nchange(123456) =&amp;gt; 254\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;(This is a repost of &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/v3a89/6152012_challenge_65_easy/\"&gt;Challenge #65 [easy]&lt;/a&gt;, originally posted by &lt;a href=\"/u/oskar_s\"&gt;u/oskar_s&lt;/a&gt; in June 2012.)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "nucsik", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 154, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/nucsik/20210607_challenge_393_easy_making_change/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/nucsik/20210607_challenge_393_easy_making_change/", "subreddit_subscribers": 224296, "created_utc": 1623073184.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Warmup\n\nImplement the `flipfront` function. Given an array of integers and a number `n` between 2 and the length of the array (inclusive), return the array with the order of the first n elements reversed.\n\n    flipfront([0, 1, 2, 3, 4], 2) =&gt; [1, 0, 2, 3, 4]\n    flipfront([0, 1, 2, 3, 4], 3) =&gt; [2, 1, 0, 3, 4]\n    flipfront([0, 1, 2, 3, 4], 5) =&gt; [4, 3, 2, 1, 0]\n    flipfront([1, 2, 2, 2], 3) =&gt; [2, 2, 1, 2]\n\nOptionally, as an optimization, modify the array in-place (in which case you don't need to return it). It's also fine to have the array be a global variable or member variable, in which case you only need to pass in the argument `n`.\n\n# Challenge\n\nGiven an array of integers, sort the array (smallest to largest) using the `flipfront` function on the entire array. For example, the array:\n\n    [3, 1, 2, 1]\n\nmay be sorted with three calls to flipfront:\n\n    flipfront([3, 1, 2, 1], 4) =&gt; [1, 2, 1, 3]\n    flipfront([1, 2, 1, 3], 2) =&gt; [2, 1, 1, 3]\n    flipfront([2, 1, 1, 3], 3) =&gt; [1, 1, 2, 3]\n\nMake sure you correctly handle elements that appear more than once in the array!\n\nYou may not modify the array by any other means, but you may examine it however you want. You can even make a copy of the array and manipulate the copy, including sorting it using some other algorithm.\n\n# Optional bonus (hard!)\n\nTry to minimize the number of times you call `flipfront` while sorting. Note that this is different from minimizing the runtime of your program.\n\nHow many `flipfront` calls do you require to sort [this list of 10,000 integers](https://gist.githubusercontent.com/cosmologicon/9e6e430d29023f24d1b885fd9c175603/raw/ea5f00e1b84eb963dd1a2f5159a49b5a6d0320f7/gistfile1.txt)? My record is 11,930. Can you do better?\n\n*(This is a repost of [Challenge #63 [intermediate]](https://www.reddit.com/r/dailyprogrammer/comments/uw16v/6112012_challenge_63_intermediate/), originally posted by u/oskar_s in June 2012.)*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-05-31] Challenge #392 [Intermediate] Pancake sort", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_np3sio", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 125, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 125, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {"gid_1": 1}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1622468833.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Warmup&lt;/h1&gt;\n\n&lt;p&gt;Implement the &lt;code&gt;flipfront&lt;/code&gt; function. Given an array of integers and a number &lt;code&gt;n&lt;/code&gt; between 2 and the length of the array (inclusive), return the array with the order of the first n elements reversed.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;flipfront([0, 1, 2, 3, 4], 2) =&amp;gt; [1, 0, 2, 3, 4]\nflipfront([0, 1, 2, 3, 4], 3) =&amp;gt; [2, 1, 0, 3, 4]\nflipfront([0, 1, 2, 3, 4], 5) =&amp;gt; [4, 3, 2, 1, 0]\nflipfront([1, 2, 2, 2], 3) =&amp;gt; [2, 2, 1, 2]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Optionally, as an optimization, modify the array in-place (in which case you don&amp;#39;t need to return it). It&amp;#39;s also fine to have the array be a global variable or member variable, in which case you only need to pass in the argument &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;Given an array of integers, sort the array (smallest to largest) using the &lt;code&gt;flipfront&lt;/code&gt; function on the entire array. For example, the array:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[3, 1, 2, 1]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;may be sorted with three calls to flipfront:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;flipfront([3, 1, 2, 1], 4) =&amp;gt; [1, 2, 1, 3]\nflipfront([1, 2, 1, 3], 2) =&amp;gt; [2, 1, 1, 3]\nflipfront([2, 1, 1, 3], 3) =&amp;gt; [1, 1, 2, 3]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Make sure you correctly handle elements that appear more than once in the array!&lt;/p&gt;\n\n&lt;p&gt;You may not modify the array by any other means, but you may examine it however you want. You can even make a copy of the array and manipulate the copy, including sorting it using some other algorithm.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus (hard!)&lt;/h1&gt;\n\n&lt;p&gt;Try to minimize the number of times you call &lt;code&gt;flipfront&lt;/code&gt; while sorting. Note that this is different from minimizing the runtime of your program.&lt;/p&gt;\n\n&lt;p&gt;How many &lt;code&gt;flipfront&lt;/code&gt; calls do you require to sort &lt;a href=\"https://gist.githubusercontent.com/cosmologicon/9e6e430d29023f24d1b885fd9c175603/raw/ea5f00e1b84eb963dd1a2f5159a49b5a6d0320f7/gistfile1.txt\"&gt;this list of 10,000 integers&lt;/a&gt;? My record is 11,930. Can you do better?&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(This is a repost of &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/uw16v/6112012_challenge_63_intermediate/\"&gt;Challenge #63 [intermediate]&lt;/a&gt;, originally posted by &lt;a href=\"/u/oskar_s\"&gt;u/oskar_s&lt;/a&gt; in June 2012.)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "gid_1", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_width": 512, "static_icon_width": 512, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Shows the Silver Award... and that's it.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 512, "name": "Silver", "resized_static_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_format": null, "icon_height": 512, "penny_price": null, "award_type": "global", "static_icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png"}], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "np3sio", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 44, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/np3sio/20210531_challenge_392_intermediate_pancake_sort/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/np3sio/20210531_challenge_392_intermediate_pancake_sort/", "subreddit_subscribers": 224296, "created_utc": 1622468833.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Background\n\nThe ABACABA sequence is defined as follows: the first iteration is the first letter of the alphabet (`a`). To form the second iteration, you take the second letter (`b`) and put the first iteration (just `a` in this case) before and after it, to get `aba`. For each subsequent iteration, place a copy of the previous iteration on either side of the next letter of the alphabet.\n\nHere are the first 5 iterations of the sequence:\n\n    a\n    aba\n    abacaba\n    abacabadabacaba\n    abacabadabacabaeabacabadabacaba\n\nThe 26th and final iteration (i.e. the one that adds the `z`) is 67,108,863 characters long. If you use one byte for each character, this takes up just under 64 megabytes of space.\n\n# Challenge\n\nWrite a program to print the 26th iteration of the ABACABA sequence.\n\nIf it's easier for you, it's also fine to print one character per line, instead of all the characters on a single line.\n\nJust printing the output can take a few minutes, depending on your setup. Feel free to test it out on something smaller instead, like the 20th iteration, which is only about 1 megabyte.\n\n# Optional bonus\n\nComplete the challenge using O(n) memory, where n is the iteration number.\n\nIf you don't know what that means, here's another way to say it that's roughly equivalent in this case. You can have as many variables as you want, but they must each hold either a single number or character, or a structure (list, vector, dict, string, map, tree, etc.) whose size never gets much larger than 26. If a function calls itself recursively, the call stack must also be limited to a depth of about 26. (This is definitely an oversimplification, but that's the basic idea. Feel free to ask if you want to know about whether any particular approach uses O(n) memory.)\n\n*(This is a repost of [Challenge #56 [easy]](https://www.reddit.com/r/dailyprogrammer/comments/u0tdt/5232012_challenge_56_easy/), originally posted by u/oskar_s in May 2012.)*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-05-24] Challenge #391 [Easy] The ABACABA sequence", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_njxq95", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 150, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 150, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {"gid_1": 1}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1621862168.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Background&lt;/h1&gt;\n\n&lt;p&gt;The ABACABA sequence is defined as follows: the first iteration is the first letter of the alphabet (&lt;code&gt;a&lt;/code&gt;). To form the second iteration, you take the second letter (&lt;code&gt;b&lt;/code&gt;) and put the first iteration (just &lt;code&gt;a&lt;/code&gt; in this case) before and after it, to get &lt;code&gt;aba&lt;/code&gt;. For each subsequent iteration, place a copy of the previous iteration on either side of the next letter of the alphabet.&lt;/p&gt;\n\n&lt;p&gt;Here are the first 5 iterations of the sequence:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;a\naba\nabacaba\nabacabadabacaba\nabacabadabacabaeabacabadabacaba\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The 26th and final iteration (i.e. the one that adds the &lt;code&gt;z&lt;/code&gt;) is 67,108,863 characters long. If you use one byte for each character, this takes up just under 64 megabytes of space.&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;Write a program to print the 26th iteration of the ABACABA sequence.&lt;/p&gt;\n\n&lt;p&gt;If it&amp;#39;s easier for you, it&amp;#39;s also fine to print one character per line, instead of all the characters on a single line.&lt;/p&gt;\n\n&lt;p&gt;Just printing the output can take a few minutes, depending on your setup. Feel free to test it out on something smaller instead, like the 20th iteration, which is only about 1 megabyte.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus&lt;/h1&gt;\n\n&lt;p&gt;Complete the challenge using O(n) memory, where n is the iteration number.&lt;/p&gt;\n\n&lt;p&gt;If you don&amp;#39;t know what that means, here&amp;#39;s another way to say it that&amp;#39;s roughly equivalent in this case. You can have as many variables as you want, but they must each hold either a single number or character, or a structure (list, vector, dict, string, map, tree, etc.) whose size never gets much larger than 26. If a function calls itself recursively, the call stack must also be limited to a depth of about 26. (This is definitely an oversimplification, but that&amp;#39;s the basic idea. Feel free to ask if you want to know about whether any particular approach uses O(n) memory.)&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(This is a repost of &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/u0tdt/5232012_challenge_56_easy/\"&gt;Challenge #56 [easy]&lt;/a&gt;, originally posted by &lt;a href=\"/u/oskar_s\"&gt;u/oskar_s&lt;/a&gt; in May 2012.)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "gid_1", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_width": 512, "static_icon_width": 512, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Shows the Silver Award... and that's it.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 512, "name": "Silver", "resized_static_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_format": null, "icon_height": 512, "penny_price": null, "award_type": "global", "static_icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png"}], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "njxq95", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 94, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/njxq95/20210524_challenge_391_easy_the_abacaba_sequence/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/njxq95/20210524_challenge_391_easy_the_abacaba_sequence/", "subreddit_subscribers": 224296, "created_utc": 1621862168.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Warmup\n\nGiven a number n, determine the number of times the digit \"1\" appears if you write out all numbers from 1 to n inclusive.\n\n    f(1) = 1\n    f(5) = 1\n    f(10) = 2\n    f(20) = 12\n    f(1234) = 689\n    f(5123) = 2557\n    f(70000) = 38000\n    f(123321) = 93395\n    f(3^35) = 90051450678399649\n\nYou should be able to handle large inputs like 3^(35) efficiently, meaning much faster than iterating over all numbers from 1 to n. Find f(5^(20)) before posting your solution. The answer is 15 digits long and the sum of its digits is 74.\n\n# Challenge\n\nf(35199981) = 35199981. Efficiently find the sum of all n such that f(n) = n. This should take a fraction of a second, depending on your programming language.\n\nThe answer is 11 digits long and the sum of its digits is 53.\n\n*(This is a repost of [Challenge #45 [difficult]](https://www.reddit.com/r/dailyprogrammer/comments/sv6xs/4272012_challenge_45_difficult/), originally posted by u/oskar_s in April 2012. Check that post for hints and more detail.)*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-05-17] Challenge #390 [Difficult] Number of 1's", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_neg49j", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 171, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 171, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {"gid_1": 1}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1621257714.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Warmup&lt;/h1&gt;\n\n&lt;p&gt;Given a number n, determine the number of times the digit &amp;quot;1&amp;quot; appears if you write out all numbers from 1 to n inclusive.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;f(1) = 1\nf(5) = 1\nf(10) = 2\nf(20) = 12\nf(1234) = 689\nf(5123) = 2557\nf(70000) = 38000\nf(123321) = 93395\nf(3^35) = 90051450678399649\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You should be able to handle large inputs like 3&lt;sup&gt;35&lt;/sup&gt; efficiently, meaning much faster than iterating over all numbers from 1 to n. Find f(5&lt;sup&gt;20&lt;/sup&gt;) before posting your solution. The answer is 15 digits long and the sum of its digits is 74.&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;f(35199981) = 35199981. Efficiently find the sum of all n such that f(n) = n. This should take a fraction of a second, depending on your programming language.&lt;/p&gt;\n\n&lt;p&gt;The answer is 11 digits long and the sum of its digits is 53.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(This is a repost of &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/sv6xs/4272012_challenge_45_difficult/\"&gt;Challenge #45 [difficult]&lt;/a&gt;, originally posted by &lt;a href=\"/u/oskar_s\"&gt;u/oskar_s&lt;/a&gt; in April 2012. Check that post for hints and more detail.)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "gid_1", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_width": 512, "static_icon_width": 512, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Shows the Silver Award... and that's it.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 512, "name": "Silver", "resized_static_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_format": null, "icon_height": 512, "penny_price": null, "award_type": "global", "static_icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png"}], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "neg49j", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 36, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/neg49j/20210517_challenge_390_difficult_number_of_1s/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/neg49j/20210517_challenge_390_difficult_number_of_1s/", "subreddit_subscribers": 224296, "created_utc": 1621257714.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Background\n\nFor the purpose of today's challenge, the Monty Hall scenario goes like this:\n\n1. There are three closed doors, labeled #1, #2, and #3. Monty Hall randomly selects one of the three doors and puts a prize behind it. The other two doors hide nothing.\n2. A contestant, who does not know where the prize is, selects one of the three doors. This door is not opened yet.\n3. Monty chooses one of the three doors and opens it. The door that Monty opens (a) does not hide the prize, and (b) is not the door that the contestant selected. There may be one or two such doors. If there are two, Monty randomly selects one or the other.\n4. There are now two closed doors, the one the contestant selected in step 2, and one they didn't select. The contestant decides whether to keep their original choice, or to switch to the other closed door.\n5. The contestant wins if the door they selected in step 4 is the same as the one Monty put a prize behind in step 1.\n\n# Challenge\n\nA contestant's strategy is given by their choices in steps 2 and 4. Write a program to determine the success rate of a contestant's strategy by simulating the game 1000 times and calculating the fraction of the times the contestant wins. Determine the success rate for these two contestants:\n\n**Alice** chooses door #1 in step 2, and always sticks with door #1 in step 4.\n\n**Bob** chooses door #1 in step 2, and always switches to the other closed door in step 4.\n\n# Optional bonus\n\nFind success rates for these other contestants:\n\n**Carol** chooses randomly from the available options in both step 2 and step 4.\n\n**Dave** chooses randomly in step 2, and always sticks with his door in step 4.\n\n**Erin** chooses randomly in step 2, and always switches in step 4.\n\n**Frank** chooses door #1 in step 2, and switches to door #2 if available in step 4. If door #2 is not available because it was opened, then he stays with door #1.\n\n**Gina** always uses either Alice's or Bob's strategy. She remembers whether her previous strategy worked and changes it accordingly. On her first game, she uses Alice's strategy. Thereafter, if she won the previous game, then she sticks with the same strategy as the previous game. If she lost the previous game, then she switches (Alice to Bob or Bob to Alice).\n\nIt's possible to calculate all of these probabilities without doing any simulation, of course, but today's challenge is to find the fractions through simulation.\n\n*(This is a repost of [Challenge #49 [easy]](https://www.reddit.com/r/dailyprogrammer/comments/tb2h0/572012_challenge_49_easy/), originally posted by u/oskar_s in May 2012.)*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-05-10] Challenge #389 [Easy] The Monty Hall problem", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_n94io8", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 173, "total_awards_received": 2, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 173, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1620661194.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1620653530.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Background&lt;/h1&gt;\n\n&lt;p&gt;For the purpose of today&amp;#39;s challenge, the Monty Hall scenario goes like this:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;There are three closed doors, labeled #1, #2, and #3. Monty Hall randomly selects one of the three doors and puts a prize behind it. The other two doors hide nothing.&lt;/li&gt;\n&lt;li&gt;A contestant, who does not know where the prize is, selects one of the three doors. This door is not opened yet.&lt;/li&gt;\n&lt;li&gt;Monty chooses one of the three doors and opens it. The door that Monty opens (a) does not hide the prize, and (b) is not the door that the contestant selected. There may be one or two such doors. If there are two, Monty randomly selects one or the other.&lt;/li&gt;\n&lt;li&gt;There are now two closed doors, the one the contestant selected in step 2, and one they didn&amp;#39;t select. The contestant decides whether to keep their original choice, or to switch to the other closed door.&lt;/li&gt;\n&lt;li&gt;The contestant wins if the door they selected in step 4 is the same as the one Monty put a prize behind in step 1.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;A contestant&amp;#39;s strategy is given by their choices in steps 2 and 4. Write a program to determine the success rate of a contestant&amp;#39;s strategy by simulating the game 1000 times and calculating the fraction of the times the contestant wins. Determine the success rate for these two contestants:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Alice&lt;/strong&gt; chooses door #1 in step 2, and always sticks with door #1 in step 4.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Bob&lt;/strong&gt; chooses door #1 in step 2, and always switches to the other closed door in step 4.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus&lt;/h1&gt;\n\n&lt;p&gt;Find success rates for these other contestants:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Carol&lt;/strong&gt; chooses randomly from the available options in both step 2 and step 4.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Dave&lt;/strong&gt; chooses randomly in step 2, and always sticks with his door in step 4.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Erin&lt;/strong&gt; chooses randomly in step 2, and always switches in step 4.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Frank&lt;/strong&gt; chooses door #1 in step 2, and switches to door #2 if available in step 4. If door #2 is not available because it was opened, then he stays with door #1.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Gina&lt;/strong&gt; always uses either Alice&amp;#39;s or Bob&amp;#39;s strategy. She remembers whether her previous strategy worked and changes it accordingly. On her first game, she uses Alice&amp;#39;s strategy. Thereafter, if she won the previous game, then she sticks with the same strategy as the previous game. If she lost the previous game, then she switches (Alice to Bob or Bob to Alice).&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s possible to calculate all of these probabilities without doing any simulation, of course, but today&amp;#39;s challenge is to find the fractions through simulation.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(This is a repost of &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/tb2h0/572012_challenge_49_easy/\"&gt;Challenge #49 [easy]&lt;/a&gt;, originally posted by &lt;a href=\"/u/oskar_s\"&gt;u/oskar_s&lt;/a&gt; in May 2012.)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 80, "id": "award_8352bdff-3e03-4189-8a08-82501dd8f835", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=16&amp;height=16&amp;auto=webp&amp;s=73a23bf7f08b633508dedf457f2704c522b94a04", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=32&amp;height=32&amp;auto=webp&amp;s=50f2f16e71d2929e3d7275060af3ad6b851dbfb1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=48&amp;height=48&amp;auto=webp&amp;s=ca487311563425e195699a4d7e4c57a98cbfde8b", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=64&amp;height=64&amp;auto=webp&amp;s=7b4eedcffb1c09a826e7837532c52979760f1d2b", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=128&amp;height=128&amp;auto=webp&amp;s=e4d5ab237eb71a9f02bb3bf9ad5ee43741918d6c", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Everything is better with a good hug", "end_date": null, "subreddit_coin_reward": 0, "count": 2, "static_icon_height": 2048, "name": "Hugz", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=16&amp;height=16&amp;auto=webp&amp;s=69997ace3ef4ffc099b81d774c2c8f1530602875", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=32&amp;height=32&amp;auto=webp&amp;s=e9519d1999ef9dce5c8a9f59369cb92f52d95319", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=48&amp;height=48&amp;auto=webp&amp;s=f076c6434fb2d2f9075991810fd845c40fa73fc6", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=64&amp;height=64&amp;auto=webp&amp;s=85527145e0c4b754306a30df29e584fd16187636", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=128&amp;height=128&amp;auto=webp&amp;s=b8843cdf82c3b741d7af057c14076dcd2621e811", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png"}], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "n94io8", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 64, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/n94io8/20210510_challenge_389_easy_the_monty_hall_problem/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/n94io8/20210510_challenge_389_easy_the_monty_hall_problem/", "subreddit_subscribers": 224296, "created_utc": 1620653530.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "A palindrome is a whole number that's the same when read backward in base 10, such as 12321 or 9449.\n\nGiven a positive whole number, find the smallest palindrome greater than the given number.\n\n    nextpal(808) =&gt; 818\n    nextpal(999) =&gt; 1001\n    nextpal(2133) =&gt; 2222\n\nFor large inputs, your solution must be much more efficient than incrementing and checking each subsequent number to see if it's a palindrome. Find nextpal(3^(39)) before posting your solution. Depending on your programming language, it should take a fraction of a second.\n\n*(This is a repost of [Challenge #58 [intermediate]](https://www.reddit.com/r/dailyprogrammer/comments/u8jn9/5282012_challenge_58_intermediate/), originally posted by u/oskar_s in May 2012.)*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-05-03] Challenge #388 [Intermediate] Next palindrome", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_n3var6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 191, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 191, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1620046532.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A palindrome is a whole number that&amp;#39;s the same when read backward in base 10, such as 12321 or 9449.&lt;/p&gt;\n\n&lt;p&gt;Given a positive whole number, find the smallest palindrome greater than the given number.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;nextpal(808) =&amp;gt; 818\nnextpal(999) =&amp;gt; 1001\nnextpal(2133) =&amp;gt; 2222\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For large inputs, your solution must be much more efficient than incrementing and checking each subsequent number to see if it&amp;#39;s a palindrome. Find nextpal(3&lt;sup&gt;39&lt;/sup&gt;) before posting your solution. Depending on your programming language, it should take a fraction of a second.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(This is a repost of &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/u8jn9/5282012_challenge_58_intermediate/\"&gt;Challenge #58 [intermediate]&lt;/a&gt;, originally posted by &lt;a href=\"/u/oskar_s\"&gt;u/oskar_s&lt;/a&gt; in May 2012.)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 150, "id": "award_f44611f1-b89e-46dc-97fe-892280b13b82", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Thank you stranger. Shows the award.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Helpful", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png"}], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "n3var6", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 90, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/n3var6/20210503_challenge_388_intermediate_next/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/n3var6/20210503_challenge_388_intermediate_next/", "subreddit_subscribers": 224296, "created_utc": 1620046532.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Warmup\n\nGiven a lowercase letter and a number between 0 and 26, return that letter Caesar shifted by that number. To Caesar shift a letter by a number, advance it in the alphabet by that many steps, wrapping around from `z` back to `a`:\n\n    warmup('a', 0) =&gt; 'a'\n    warmup('a', 1) =&gt; 'b'\n    warmup('a', 5) =&gt; 'f'\n    warmup('a', 26) =&gt; 'a'\n    warmup('d', 15) =&gt; 's'\n    warmup('z', 1) =&gt; 'a'\n    warmup('q', 22) =&gt; 'm'\n\nHint: taking a number modulo 26 will wrap around from 25 back to 0. This is commonly represented using the modulus operator `%`. For example, `29 % 26 = 3`. Finding a way to map from the letters a-z to the numbers 0-25 and back will help.\n\n# Challenge\n\nGiven a string of lowercase letters and a number, return a string with each letter Caesar shifted by the given amount.\n\n    caesar(\"a\", 1) =&gt; \"b\"\n    caesar(\"abcz\", 1) =&gt; \"bcda\"\n    caesar(\"irk\", 13) =&gt; \"vex\"\n    caesar(\"fusion\", 6) =&gt; \"layout\"\n    caesar(\"dailyprogrammer\", 6) =&gt; \"jgorevxumxgsskx\"\n    caesar(\"jgorevxumxgsskx\", 20) =&gt; \"dailyprogrammer\"\n\nHint: you can use the `warmup` function as a helper function.\n\n# Optional bonus 1\n\nCorrectly handle capital letters and non-letter characters. Capital letters should also be shifted like lowercase letters, but remain capitalized. Leave non-letter characters, such as spaces and punctuation, unshifted.\n\n    caesar(\"Daily Programmer!\", 6) =&gt; \"Jgore Vxumxgsskx!\"\n\nIf you speak a language that doesn't use the 26-letter A-Z alphabet that English does, handle strings in that language in whatever way makes the most sense to you! In English, if a string is encoded using the number N, you can decode it using the number 26 - N. Make sure that for your language, there's some similar way to decode strings.\n\n# Optional bonus 2\n\nGiven a string of English text that has been Caesar shifted by some number between 0 and 26, write a function to make a best guess of what the original string was. You can typically do this by hand easily enough, but the challenge is to write a program to do it automatically. Decode the following strings:\n\n    Zol abyulk tl puav h ulda.\n\n    Tfdv ef wlikyvi, wfi uvrky rnrzkj pfl rcc nzky erjkp, szx, gfzekp kvvky.\n\n    Qv wzlmz bw uiqvbiqv iqz-axmml dmtwkqbg, i aeittwe vmmla bw jmib qba eqvoa nwzbg-bpzmm bquma mdmzg amkwvl, zqopb?\n\nOne simple way is by using a letter frequency table. Assign each letter in the string a score, with 3 for `a`, -1 for `b`, 1 for `c`, etc., as follows:\n\n    3,-1,1,1,4,0,0,2,2,-5,-2,1,0,2,3,0,-6,2,2,3,1,-1,0,-5,0,-7\n\nThe average score of the letters in a string will tell you how its letter distribution compares to typical English. Higher is better. Typical English will have an average score around 2, and strings of random letters will have an average score around 0. Just test out each possible shift for the string, and take the one with the highest score. There are other good ways to do it, though.\n\n*(This challenge is based on [Challenge #47 [easy]](https://www.reddit.com/r/dailyprogrammer/comments/t33vi/522012_challenge_47_easy/), originally posted by u/oskar_s in May 2012.)*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2021-04-26] Challenge #387 [Easy] Caesar cipher", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_myx3wn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 203, "total_awards_received": 2, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 203, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1619442043.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Warmup&lt;/h1&gt;\n\n&lt;p&gt;Given a lowercase letter and a number between 0 and 26, return that letter Caesar shifted by that number. To Caesar shift a letter by a number, advance it in the alphabet by that many steps, wrapping around from &lt;code&gt;z&lt;/code&gt; back to &lt;code&gt;a&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;warmup(&amp;#39;a&amp;#39;, 0) =&amp;gt; &amp;#39;a&amp;#39;\nwarmup(&amp;#39;a&amp;#39;, 1) =&amp;gt; &amp;#39;b&amp;#39;\nwarmup(&amp;#39;a&amp;#39;, 5) =&amp;gt; &amp;#39;f&amp;#39;\nwarmup(&amp;#39;a&amp;#39;, 26) =&amp;gt; &amp;#39;a&amp;#39;\nwarmup(&amp;#39;d&amp;#39;, 15) =&amp;gt; &amp;#39;s&amp;#39;\nwarmup(&amp;#39;z&amp;#39;, 1) =&amp;gt; &amp;#39;a&amp;#39;\nwarmup(&amp;#39;q&amp;#39;, 22) =&amp;gt; &amp;#39;m&amp;#39;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hint: taking a number modulo 26 will wrap around from 25 back to 0. This is commonly represented using the modulus operator &lt;code&gt;%&lt;/code&gt;. For example, &lt;code&gt;29 % 26 = 3&lt;/code&gt;. Finding a way to map from the letters a-z to the numbers 0-25 and back will help.&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;Given a string of lowercase letters and a number, return a string with each letter Caesar shifted by the given amount.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;caesar(&amp;quot;a&amp;quot;, 1) =&amp;gt; &amp;quot;b&amp;quot;\ncaesar(&amp;quot;abcz&amp;quot;, 1) =&amp;gt; &amp;quot;bcda&amp;quot;\ncaesar(&amp;quot;irk&amp;quot;, 13) =&amp;gt; &amp;quot;vex&amp;quot;\ncaesar(&amp;quot;fusion&amp;quot;, 6) =&amp;gt; &amp;quot;layout&amp;quot;\ncaesar(&amp;quot;dailyprogrammer&amp;quot;, 6) =&amp;gt; &amp;quot;jgorevxumxgsskx&amp;quot;\ncaesar(&amp;quot;jgorevxumxgsskx&amp;quot;, 20) =&amp;gt; &amp;quot;dailyprogrammer&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Hint: you can use the &lt;code&gt;warmup&lt;/code&gt; function as a helper function.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus 1&lt;/h1&gt;\n\n&lt;p&gt;Correctly handle capital letters and non-letter characters. Capital letters should also be shifted like lowercase letters, but remain capitalized. Leave non-letter characters, such as spaces and punctuation, unshifted.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;caesar(&amp;quot;Daily Programmer!&amp;quot;, 6) =&amp;gt; &amp;quot;Jgore Vxumxgsskx!&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you speak a language that doesn&amp;#39;t use the 26-letter A-Z alphabet that English does, handle strings in that language in whatever way makes the most sense to you! In English, if a string is encoded using the number N, you can decode it using the number 26 - N. Make sure that for your language, there&amp;#39;s some similar way to decode strings.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus 2&lt;/h1&gt;\n\n&lt;p&gt;Given a string of English text that has been Caesar shifted by some number between 0 and 26, write a function to make a best guess of what the original string was. You can typically do this by hand easily enough, but the challenge is to write a program to do it automatically. Decode the following strings:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Zol abyulk tl puav h ulda.\n\nTfdv ef wlikyvi, wfi uvrky rnrzkj pfl rcc nzky erjkp, szx, gfzekp kvvky.\n\nQv wzlmz bw uiqvbiqv iqz-axmml dmtwkqbg, i aeittwe vmmla bw jmib qba eqvoa nwzbg-bpzmm bquma mdmzg amkwvl, zqopb?\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;One simple way is by using a letter frequency table. Assign each letter in the string a score, with 3 for &lt;code&gt;a&lt;/code&gt;, -1 for &lt;code&gt;b&lt;/code&gt;, 1 for &lt;code&gt;c&lt;/code&gt;, etc., as follows:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;3,-1,1,1,4,0,0,2,2,-5,-2,1,0,2,3,0,-6,2,2,3,1,-1,0,-5,0,-7\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The average score of the letters in a string will tell you how its letter distribution compares to typical English. Higher is better. Typical English will have an average score around 2, and strings of random letters will have an average score around 0. Just test out each possible shift for the string, and take the one with the highest score. There are other good ways to do it, though.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(This challenge is based on &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/t33vi/522012_challenge_47_easy/\"&gt;Challenge #47 [easy]&lt;/a&gt;, originally posted by &lt;a href=\"/u/oskar_s\"&gt;u/oskar_s&lt;/a&gt; in May 2012.)&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 150, "id": "award_f44611f1-b89e-46dc-97fe-892280b13b82", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Thank you stranger. Shows the award.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Helpful", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png"}, {"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 80, "id": "award_8352bdff-3e03-4189-8a08-82501dd8f835", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=16&amp;height=16&amp;auto=webp&amp;s=73a23bf7f08b633508dedf457f2704c522b94a04", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=32&amp;height=32&amp;auto=webp&amp;s=50f2f16e71d2929e3d7275060af3ad6b851dbfb1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=48&amp;height=48&amp;auto=webp&amp;s=ca487311563425e195699a4d7e4c57a98cbfde8b", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=64&amp;height=64&amp;auto=webp&amp;s=7b4eedcffb1c09a826e7837532c52979760f1d2b", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/ks45ij6w05f61_oldHugz.png?width=128&amp;height=128&amp;auto=webp&amp;s=e4d5ab237eb71a9f02bb3bf9ad5ee43741918d6c", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Everything is better with a good hug", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Hugz", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=16&amp;height=16&amp;auto=webp&amp;s=69997ace3ef4ffc099b81d774c2c8f1530602875", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=32&amp;height=32&amp;auto=webp&amp;s=e9519d1999ef9dce5c8a9f59369cb92f52d95319", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=48&amp;height=48&amp;auto=webp&amp;s=f076c6434fb2d2f9075991810fd845c40fa73fc6", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=64&amp;height=64&amp;auto=webp&amp;s=85527145e0c4b754306a30df29e584fd16187636", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png?width=128&amp;height=128&amp;auto=webp&amp;s=b8843cdf82c3b741d7af057c14076dcd2621e811", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_q0gj4/fpm0r5ryq1361_PolarHugs.png"}], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "myx3wn", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 68, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/myx3wn/20210426_challenge_387_easy_caesar_cipher/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/myx3wn/20210426_challenge_387_easy_caesar_cipher/", "subreddit_subscribers": 224296, "created_utc": 1619442043.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "Today's challenge comes from [a recent Mathologer video](https://www.youtube.com/watch?v=iJ8pnCO0nTY).\n\n# Background\n\nThere are 7 ways to partition the number 5 into the sum of positive integers:\n\n    5 = 1 + 4 = 1 + 1 + 3 = 2 + 3 = 1 + 2 + 2 = 1 + 1 + 1 + 2 = 1 + 1 + 1 + 1 + 1\n\nLet's express this as `p(5) = 7`. If you write down the number of ways to partition each number starting at 0 you get:\n\n    p(n) = 1, 1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, ...\n\nBy convention, `p(0) = 1`.\n\n# Challenge\n\nCompute `p(666)`. You must run your program all the way through to completion to meet the challenge. To check your answer, `p(666)` is a 26-digit number and the sum of the digits is 127. Also, `p(66) = 2323520`.\n\nYou can do this using the definition of `p(n)` above, although you'll need to be more clever than listing all possible partitions of 666 and counting them. Alternatively, you can use the formula for `p(n)` given in the next section.\n\nIf your programming language does not handle big integers easily, you can instead compute the last 6 digits of `p(666)`.\n\n# Sequence formula\n\nIf you wish to see this section in video form, it's covered in the Mathologer video starting at 9:35.\n\nThe formula for `p(n)` can be recursively defined in terms of smaller values in the sequence. For example,\n\n    p(6) = p(6-1) + p(6-2) - p(6-5)\n        = p(5) + p(4) - p(1)\n        = 7 + 5 - 1\n        = 11\n\nIn general:\n\n    p(n) =\n        p(n-1) +\n        p(n-2) -\n        p(n-5) -\n        p(n-7) +\n        p(n-12) +\n        p(n-15) -\n        p(n-22) -\n        p(n-26) + ...\n\nWhile the sequence is infinite, `p(n) = 0` when `n &lt; 0`, so you stop when the argument becomes negative. The first two terms of this sequence (`p(n-1)` and `p(n-2)`) are positive, followed by two negative terms (`-p(n-5)` and `-p(n-7)`), and then it repeats back and forth: two positive, two negative, etc.\n\nThe numbers that get subtracted from the argument form a second sequence:\n\n    1, 2, 5, 7, 12, 15, 22, 26, 35, 40, 51, 57, 70, ...\n\nThis second sequence starts at 1, and the difference between consecutive values in the sequence (2-1, 5-2, 7-5, 12-7, ...) is a third sequence:\n\n    1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, ...\n\nThis third sequence alternates between the sequence `1, 2, 3, 4, 5, 6, ...` and the sequence `3, 5, 7, 9, 11, 13, ...`. It's easier to see if you write it like this:\n\n    1,    2,    3,    4,    5,     6,     7,\n       3,    5,    7,    9,    11,    13,    ...\n\nOkay? So using this third sequence, you can generate the second sequence above, which lets you implement the formula for `p(n)` in terms of smaller `p` values.\n\n# Optional Bonus\n\nHow fast can you find the sum of the digits of `p(666666)`.", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2020-10-21] Challenge #386 [Intermediate] Partition counts", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jfcuz5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 165, "total_awards_received": 3, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 165, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {"gid_1": 2}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603287154.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Today&amp;#39;s challenge comes from &lt;a href=\"https://www.youtube.com/watch?v=iJ8pnCO0nTY\"&gt;a recent Mathologer video&lt;/a&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Background&lt;/h1&gt;\n\n&lt;p&gt;There are 7 ways to partition the number 5 into the sum of positive integers:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;5 = 1 + 4 = 1 + 1 + 3 = 2 + 3 = 1 + 2 + 2 = 1 + 1 + 1 + 2 = 1 + 1 + 1 + 1 + 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&amp;#39;s express this as &lt;code&gt;p(5) = 7&lt;/code&gt;. If you write down the number of ways to partition each number starting at 0 you get:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;p(n) = 1, 1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;By convention, &lt;code&gt;p(0) = 1&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;Compute &lt;code&gt;p(666)&lt;/code&gt;. You must run your program all the way through to completion to meet the challenge. To check your answer, &lt;code&gt;p(666)&lt;/code&gt; is a 26-digit number and the sum of the digits is 127. Also, &lt;code&gt;p(66) = 2323520&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;You can do this using the definition of &lt;code&gt;p(n)&lt;/code&gt; above, although you&amp;#39;ll need to be more clever than listing all possible partitions of 666 and counting them. Alternatively, you can use the formula for &lt;code&gt;p(n)&lt;/code&gt; given in the next section.&lt;/p&gt;\n\n&lt;p&gt;If your programming language does not handle big integers easily, you can instead compute the last 6 digits of &lt;code&gt;p(666)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;h1&gt;Sequence formula&lt;/h1&gt;\n\n&lt;p&gt;If you wish to see this section in video form, it&amp;#39;s covered in the Mathologer video starting at 9:35.&lt;/p&gt;\n\n&lt;p&gt;The formula for &lt;code&gt;p(n)&lt;/code&gt; can be recursively defined in terms of smaller values in the sequence. For example,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;p(6) = p(6-1) + p(6-2) - p(6-5)\n    = p(5) + p(4) - p(1)\n    = 7 + 5 - 1\n    = 11\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In general:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;p(n) =\n    p(n-1) +\n    p(n-2) -\n    p(n-5) -\n    p(n-7) +\n    p(n-12) +\n    p(n-15) -\n    p(n-22) -\n    p(n-26) + ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;While the sequence is infinite, &lt;code&gt;p(n) = 0&lt;/code&gt; when &lt;code&gt;n &amp;lt; 0&lt;/code&gt;, so you stop when the argument becomes negative. The first two terms of this sequence (&lt;code&gt;p(n-1)&lt;/code&gt; and &lt;code&gt;p(n-2)&lt;/code&gt;) are positive, followed by two negative terms (&lt;code&gt;-p(n-5)&lt;/code&gt; and &lt;code&gt;-p(n-7)&lt;/code&gt;), and then it repeats back and forth: two positive, two negative, etc.&lt;/p&gt;\n\n&lt;p&gt;The numbers that get subtracted from the argument form a second sequence:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1, 2, 5, 7, 12, 15, 22, 26, 35, 40, 51, 57, 70, ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This second sequence starts at 1, and the difference between consecutive values in the sequence (2-1, 5-2, 7-5, 12-7, ...) is a third sequence:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This third sequence alternates between the sequence &lt;code&gt;1, 2, 3, 4, 5, 6, ...&lt;/code&gt; and the sequence &lt;code&gt;3, 5, 7, 9, 11, 13, ...&lt;/code&gt;. It&amp;#39;s easier to see if you write it like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1,    2,    3,    4,    5,     6,     7,\n   3,    5,    7,    9,    11,    13,    ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Okay? So using this third sequence, you can generate the second sequence above, which lets you implement the formula for &lt;code&gt;p(n)&lt;/code&gt; in terms of smaller &lt;code&gt;p&lt;/code&gt; values.&lt;/p&gt;\n\n&lt;h1&gt;Optional Bonus&lt;/h1&gt;\n\n&lt;p&gt;How fast can you find the sum of the digits of &lt;code&gt;p(666666)&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 125, "id": "award_5f123e3d-4f48-42f4-9c11-e98b566d5897", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=16&amp;height=16&amp;auto=webp&amp;s=92932f465d58e4c16b12b6eac4ca07d27e3d11c0", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=32&amp;height=32&amp;auto=webp&amp;s=d11484a208d68a318bf9d4fcf371171a1cb6a7ef", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=48&amp;height=48&amp;auto=webp&amp;s=febdf28b6f39f7da7eb1365325b85e0bb49a9f63", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=64&amp;height=64&amp;auto=webp&amp;s=b4406a2d88bf86fa3dc8a45aacf7e0c7bdccc4fb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=128&amp;height=128&amp;auto=webp&amp;s=19555b13e3e196b62eeb9160d1ac1d1b372dcb0b", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "When you come across a feel-good thing.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Wholesome", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=16&amp;height=16&amp;auto=webp&amp;s=92932f465d58e4c16b12b6eac4ca07d27e3d11c0", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=32&amp;height=32&amp;auto=webp&amp;s=d11484a208d68a318bf9d4fcf371171a1cb6a7ef", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=48&amp;height=48&amp;auto=webp&amp;s=febdf28b6f39f7da7eb1365325b85e0bb49a9f63", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=64&amp;height=64&amp;auto=webp&amp;s=b4406a2d88bf86fa3dc8a45aacf7e0c7bdccc4fb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=128&amp;height=128&amp;auto=webp&amp;s=19555b13e3e196b62eeb9160d1ac1d1b372dcb0b", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png"}, {"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "gid_1", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_width": 512, "static_icon_width": 512, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Shows the Silver Award... and that's it.", "end_date": null, "subreddit_coin_reward": 0, "count": 2, "static_icon_height": 512, "name": "Silver", "resized_static_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_format": null, "icon_height": 512, "penny_price": null, "award_type": "global", "static_icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png"}], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jfcuz5", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 45, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/jfcuz5/20201021_challenge_386_intermediate_partition/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/jfcuz5/20201021_challenge_386_intermediate_partition/", "subreddit_subscribers": 224296, "created_utc": 1603287154.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "For the purpose of this challenge, a *k-ary necklace of length n* is a sequence of n letters chosen from k options, e.g. `ABBEACEEA` is a 5-ary necklace of length 9. Note that not every letter needs to appear in the necklace. Two necklaces are equal if you can move some letters from the beginning to the end to make the other one, otherwise maintaining the order. For instance, `ABCDE` is equal to `DEABC`. For more detail, see [challenge #383 Easy: Necklace matching](https://www.reddit.com/r/dailyprogrammer/comments/ffxabb/20200309_challenge_383_easy_necklace_matching/).\n\nToday's challenge is, given k and n, find the number of *distinct* k-ary necklaces of length n. That is, the size of the largest set of k-ary necklaces of length n such that no two of them are equal to each other. You do not need to actually generate the necklaces, just count them.\n\nFor example, there are 24 distinct 3-ary necklaces of length 4, so `necklaces(3, 4)` is `24`. Here they are:\n\n    AAAA  BBBB  CCCC\n    AAAB  BBBC  CCCA\n    AAAC  BBBA  CCCB\n    AABB  BBCC  CCAA\n    ABAB  BCBC  CACA\n    AABC  BBCA  CCAB\n    AACB  BBAC  CCBA\n    ABAC  BCBA  CACB\n\nYou only need to handle inputs such that k^n &lt; 10,000.\n\n    necklaces(2, 12) =&gt; 352\n    necklaces(3, 7) =&gt; 315\n    necklaces(9, 4) =&gt; 1665\n    necklaces(21, 3) =&gt; 3101\n    necklaces(99, 2) =&gt; 4950\n\nThe most straightforward way to count necklaces is to generate all k^n patterns, and deduplicate them (potentially using your code from Easy #383). This is an acceptable approach for this challenge, as long as you can actually run your program through to completion for the above examples.\n\n# Optional optimization\n\nA more efficient way is with the formula:\n\n    necklaces(k, n) = 1/n * Sum of (phi(a) k^b)\n        for all positive integers a,b such that a*b = n.\n\nFor example, the ways to factor 10 into two positive integers are 1x10, 2x5, 5x2, and 10x1, so:\n\n    necklaces(3, 10)\n        = 1/10 (phi(1) 3^10 + phi(2) 3^5 + phi(5) 3^2 + phi(10) 3^1)\n        = 1/10 (1 * 59049 + 1 * 243 + 4 * 9 + 4 * 3)\n        = 5934\n\n`phi(a)` is [Euler's totient function](https://en.wikipedia.org/wiki/Euler%27s_totient_function), which is the number of positive integers `x` less than or equal to `a` such that [the greatest common divisor](https://en.wikipedia.org/wiki/Greatest_common_divisor) of `x` and `a` is 1. For instance, phi(12) = 4, because 1, 5, 7, and 11 are coprime with 12.\n\nAn efficient way to compute `phi` is with the formula:\n\n    phi(a) = a * Product of (p-1) / Product of (p)\n        for all distinct prime p that divide evenly into a.\n\nFor example, for `a = 12`, the primes that divide `a` are 2 and 3. So:\n\n    phi(12) = 12 * ((2-1)*(3-1)) / (2*3) = 12 * 2 / 6 = 4\n\nIf you decide to go this route, you can test much bigger examples.\n\n    necklaces(3, 90) =&gt; 96977372978752360287715019917722911297222\n    necklaces(123, 18) =&gt; 2306850769218800390268044415272597042\n    necklaces(1234567, 6) =&gt; 590115108867910855092196771880677924\n    necklaces(12345678910, 3) =&gt; 627225458787209496560873442940\n\nIf your language doesn't easily let you handle such big numbers, that's okay. But your program should run much faster than O(k^(n)).", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2020-04-15] Challenge #384 [Intermediate] Necklace counting", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_g1xrun", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 145, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 145, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1586975747.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586975540.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For the purpose of this challenge, a &lt;em&gt;k-ary necklace of length n&lt;/em&gt; is a sequence of n letters chosen from k options, e.g. &lt;code&gt;ABBEACEEA&lt;/code&gt; is a 5-ary necklace of length 9. Note that not every letter needs to appear in the necklace. Two necklaces are equal if you can move some letters from the beginning to the end to make the other one, otherwise maintaining the order. For instance, &lt;code&gt;ABCDE&lt;/code&gt; is equal to &lt;code&gt;DEABC&lt;/code&gt;. For more detail, see &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/ffxabb/20200309_challenge_383_easy_necklace_matching/\"&gt;challenge #383 Easy: Necklace matching&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Today&amp;#39;s challenge is, given k and n, find the number of &lt;em&gt;distinct&lt;/em&gt; k-ary necklaces of length n. That is, the size of the largest set of k-ary necklaces of length n such that no two of them are equal to each other. You do not need to actually generate the necklaces, just count them.&lt;/p&gt;\n\n&lt;p&gt;For example, there are 24 distinct 3-ary necklaces of length 4, so &lt;code&gt;necklaces(3, 4)&lt;/code&gt; is &lt;code&gt;24&lt;/code&gt;. Here they are:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;AAAA  BBBB  CCCC\nAAAB  BBBC  CCCA\nAAAC  BBBA  CCCB\nAABB  BBCC  CCAA\nABAB  BCBC  CACA\nAABC  BBCA  CCAB\nAACB  BBAC  CCBA\nABAC  BCBA  CACB\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You only need to handle inputs such that k&lt;sup&gt;n&lt;/sup&gt; &amp;lt; 10,000.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;necklaces(2, 12) =&amp;gt; 352\nnecklaces(3, 7) =&amp;gt; 315\nnecklaces(9, 4) =&amp;gt; 1665\nnecklaces(21, 3) =&amp;gt; 3101\nnecklaces(99, 2) =&amp;gt; 4950\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The most straightforward way to count necklaces is to generate all k&lt;sup&gt;n&lt;/sup&gt; patterns, and deduplicate them (potentially using your code from Easy #383). This is an acceptable approach for this challenge, as long as you can actually run your program through to completion for the above examples.&lt;/p&gt;\n\n&lt;h1&gt;Optional optimization&lt;/h1&gt;\n\n&lt;p&gt;A more efficient way is with the formula:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;necklaces(k, n) = 1/n * Sum of (phi(a) k^b)\n    for all positive integers a,b such that a*b = n.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example, the ways to factor 10 into two positive integers are 1x10, 2x5, 5x2, and 10x1, so:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;necklaces(3, 10)\n    = 1/10 (phi(1) 3^10 + phi(2) 3^5 + phi(5) 3^2 + phi(10) 3^1)\n    = 1/10 (1 * 59049 + 1 * 243 + 4 * 9 + 4 * 3)\n    = 5934\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;phi(a)&lt;/code&gt; is &lt;a href=\"https://en.wikipedia.org/wiki/Euler%27s_totient_function\"&gt;Euler&amp;#39;s totient function&lt;/a&gt;, which is the number of positive integers &lt;code&gt;x&lt;/code&gt; less than or equal to &lt;code&gt;a&lt;/code&gt; such that &lt;a href=\"https://en.wikipedia.org/wiki/Greatest_common_divisor\"&gt;the greatest common divisor&lt;/a&gt; of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; is 1. For instance, phi(12) = 4, because 1, 5, 7, and 11 are coprime with 12.&lt;/p&gt;\n\n&lt;p&gt;An efficient way to compute &lt;code&gt;phi&lt;/code&gt; is with the formula:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;phi(a) = a * Product of (p-1) / Product of (p)\n    for all distinct prime p that divide evenly into a.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For example, for &lt;code&gt;a = 12&lt;/code&gt;, the primes that divide &lt;code&gt;a&lt;/code&gt; are 2 and 3. So:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;phi(12) = 12 * ((2-1)*(3-1)) / (2*3) = 12 * 2 / 6 = 4\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you decide to go this route, you can test much bigger examples.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;necklaces(3, 90) =&amp;gt; 96977372978752360287715019917722911297222\nnecklaces(123, 18) =&amp;gt; 2306850769218800390268044415272597042\nnecklaces(1234567, 6) =&amp;gt; 590115108867910855092196771880677924\nnecklaces(12345678910, 3) =&amp;gt; 627225458787209496560873442940\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If your language doesn&amp;#39;t easily let you handle such big numbers, that&amp;#39;s okay. But your program should run much faster than O(k&lt;sup&gt;n&lt;/sup&gt;).&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g1xrun", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 28, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/g1xrun/20200415_challenge_384_intermediate_necklace/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/g1xrun/20200415_challenge_384_intermediate_necklace/", "subreddit_subscribers": 224296, "created_utc": 1586975540.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Challenge\n\nImagine a necklace with lettered beads that can slide along the string. [Here's an example image.](https://www.craftkitsandsupplies.com/images/Beads/Alpha_Beads/Wood_Alphabet_Beads_26217.jpg) In this example, you could take the `N` off `NICOLE` and slide it around to the other end to make `ICOLEN`. Do it again to get `COLENI`, and so on. For the purpose of today's challenge, we'll say that the strings `\"nicole\"`, `\"icolen\"`, and `\"coleni\"` describe the same necklace.\n\nGenerally, two strings describe the same necklace if you can remove some number of letters from the beginning of one, attach them to the end in their original ordering, and get the other string. Reordering the letters in some other way does not, in general, produce a string that describes the same necklace.\n\nWrite a function that returns whether two strings describe the same necklace.\n\n# Examples\n\n    same_necklace(\"nicole\", \"icolen\") =&gt; true\n    same_necklace(\"nicole\", \"lenico\") =&gt; true\n    same_necklace(\"nicole\", \"coneli\") =&gt; false\n    same_necklace(\"aabaaaaabaab\", \"aabaabaabaaa\") =&gt; true\n    same_necklace(\"abc\", \"cba\") =&gt; false\n    same_necklace(\"xxyyy\", \"xxxyy\") =&gt; false\n    same_necklace(\"xyxxz\", \"xxyxz\") =&gt; false\n    same_necklace(\"x\", \"x\") =&gt; true\n    same_necklace(\"x\", \"xx\") =&gt; false\n    same_necklace(\"x\", \"\") =&gt; false\n    same_necklace(\"\", \"\") =&gt; true\n\n# Optional Bonus 1\n\nIf you have a string of N letters and you move each letter one at a time from the start to the end, you'll eventually get back to the string you started with, after N steps. Sometimes, you'll see the same string you started with before N steps. For instance, if you start with `\"abcabcabc\"`, you'll see the same string (`\"abcabcabc\"`) 3 times over the course of moving a letter 9 times.\n\nWrite a function that returns the number of times you encounter the same starting string if you move each letter in the string from the start to the end, one at a time.\n\n    repeats(\"abc\") =&gt; 1\n    repeats(\"abcabcabc\") =&gt; 3\n    repeats(\"abcabcabcx\") =&gt; 1\n    repeats(\"aaaaaa\") =&gt; 6\n    repeats(\"a\") =&gt; 1\n    repeats(\"\") =&gt; 1\n\n# Optional Bonus 2\n\nThere is exactly one set of four words in [the enable1 word list](https://raw.githubusercontent.com/dolph/dictionary/master/enable1.txt) that all describe the same necklace. Find the four words.", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2020-03-09] Challenge #383 [Easy] Necklace matching", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ffxabb", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 197, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 197, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1583778263.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1583771239.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;Imagine a necklace with lettered beads that can slide along the string. &lt;a href=\"https://www.craftkitsandsupplies.com/images/Beads/Alpha_Beads/Wood_Alphabet_Beads_26217.jpg\"&gt;Here&amp;#39;s an example image.&lt;/a&gt; In this example, you could take the &lt;code&gt;N&lt;/code&gt; off &lt;code&gt;NICOLE&lt;/code&gt; and slide it around to the other end to make &lt;code&gt;ICOLEN&lt;/code&gt;. Do it again to get &lt;code&gt;COLENI&lt;/code&gt;, and so on. For the purpose of today&amp;#39;s challenge, we&amp;#39;ll say that the strings &lt;code&gt;&amp;quot;nicole&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;icolen&amp;quot;&lt;/code&gt;, and &lt;code&gt;&amp;quot;coleni&amp;quot;&lt;/code&gt; describe the same necklace.&lt;/p&gt;\n\n&lt;p&gt;Generally, two strings describe the same necklace if you can remove some number of letters from the beginning of one, attach them to the end in their original ordering, and get the other string. Reordering the letters in some other way does not, in general, produce a string that describes the same necklace.&lt;/p&gt;\n\n&lt;p&gt;Write a function that returns whether two strings describe the same necklace.&lt;/p&gt;\n\n&lt;h1&gt;Examples&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;same_necklace(&amp;quot;nicole&amp;quot;, &amp;quot;icolen&amp;quot;) =&amp;gt; true\nsame_necklace(&amp;quot;nicole&amp;quot;, &amp;quot;lenico&amp;quot;) =&amp;gt; true\nsame_necklace(&amp;quot;nicole&amp;quot;, &amp;quot;coneli&amp;quot;) =&amp;gt; false\nsame_necklace(&amp;quot;aabaaaaabaab&amp;quot;, &amp;quot;aabaabaabaaa&amp;quot;) =&amp;gt; true\nsame_necklace(&amp;quot;abc&amp;quot;, &amp;quot;cba&amp;quot;) =&amp;gt; false\nsame_necklace(&amp;quot;xxyyy&amp;quot;, &amp;quot;xxxyy&amp;quot;) =&amp;gt; false\nsame_necklace(&amp;quot;xyxxz&amp;quot;, &amp;quot;xxyxz&amp;quot;) =&amp;gt; false\nsame_necklace(&amp;quot;x&amp;quot;, &amp;quot;x&amp;quot;) =&amp;gt; true\nsame_necklace(&amp;quot;x&amp;quot;, &amp;quot;xx&amp;quot;) =&amp;gt; false\nsame_necklace(&amp;quot;x&amp;quot;, &amp;quot;&amp;quot;) =&amp;gt; false\nsame_necklace(&amp;quot;&amp;quot;, &amp;quot;&amp;quot;) =&amp;gt; true\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional Bonus 1&lt;/h1&gt;\n\n&lt;p&gt;If you have a string of N letters and you move each letter one at a time from the start to the end, you&amp;#39;ll eventually get back to the string you started with, after N steps. Sometimes, you&amp;#39;ll see the same string you started with before N steps. For instance, if you start with &lt;code&gt;&amp;quot;abcabcabc&amp;quot;&lt;/code&gt;, you&amp;#39;ll see the same string (&lt;code&gt;&amp;quot;abcabcabc&amp;quot;&lt;/code&gt;) 3 times over the course of moving a letter 9 times.&lt;/p&gt;\n\n&lt;p&gt;Write a function that returns the number of times you encounter the same starting string if you move each letter in the string from the start to the end, one at a time.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;repeats(&amp;quot;abc&amp;quot;) =&amp;gt; 1\nrepeats(&amp;quot;abcabcabc&amp;quot;) =&amp;gt; 3\nrepeats(&amp;quot;abcabcabcx&amp;quot;) =&amp;gt; 1\nrepeats(&amp;quot;aaaaaa&amp;quot;) =&amp;gt; 6\nrepeats(&amp;quot;a&amp;quot;) =&amp;gt; 1\nrepeats(&amp;quot;&amp;quot;) =&amp;gt; 1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional Bonus 2&lt;/h1&gt;\n\n&lt;p&gt;There is exactly one set of four words in &lt;a href=\"https://raw.githubusercontent.com/dolph/dictionary/master/enable1.txt\"&gt;the enable1 word list&lt;/a&gt; that all describe the same necklace. Find the four words.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ffxabb", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 186, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/ffxabb/20200309_challenge_383_easy_necklace_matching/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/ffxabb/20200309_challenge_383_easy_necklace_matching/", "subreddit_subscribers": 224296, "created_utc": 1583771239.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "Given the numbering of a crossword puzzle's clues, find its grid.\n\n# Background\n\nFor the purpose of today's challenge, a standard American crossword grid (like you would typically find in the New York Times) is an odd-dimension square grid of black and white squares with the following requirements:\n\n1. The grid has 180 degree rotational symmetry.\n2. The white squares form a single connected component. Squares are connected horizontally or vertically.\n3. Every word is at least 3 letters long. A word is a horizontal (Across) or vertical (Down) run of white squares.\n4. Every white square is checked, meaning it appears in both an Across word and a Down word. (Equivalently, there are no 1-letter words either.)\n\n[Here are some examples of valid and invalid grids](https://gist.github.com/cosmologicon/918623145c549b9b4968d690550b3662), using `.` for white squares and `#` for black squares.\n\nSome of the squares in the crossword grid are numbered ([here's an example if you're not familiar with crosswords](https://en.wikipedia.org/wiki/Crossword#/media/File:CrosswordUSA.svg)). The numbers that appear in the grid are determined by the layout of black and white squares in the grid as follows:\n\nThe first white square in each word is numbered, starting at 1, then 2, 3, etc. \"First\" here means the leftmost square for Across clues, and the topmost square for Down clues. If a square is the first square in both an Across word and a Down word, it only gets one number. The numbering starts at the top left and goes left to right and then top to bottom.\n\nThe set of Across word numbers is the numbers in the squares that start Across clues, and the set of Down word numbers is the numbers in the squares that start Down clues.\n\n# Challenge\n\nGiven a grid size and two lists of Across word numbers and Down word numbers, find a valid grid that matches the numbers. Inputs are guaranteed to have at least one valid solution, but it's not guaranteed to be unique. Any valid output that matches the input is acceptable.\n\nTo complete this challenge, you must run your program all the way through to completion for at least one challenge input.\n\n# Example input\n\nYou are not required to use any particular input/output format. Feel free to hard code the input into your program.\n\n    EXAMPLE: 15x15\n    A: 1,4,7,10,13,14,16,17,18,20,21,23,24,26,28,29,33,35,36,38,39,42,44,45,47,49,50,52,55,56,58,59,61,63,67,69,70,71,72,73,74,75,76\n    D: 1,2,3,4,5,6,7,8,9,11,12,15,19,22,25,27,29,30,31,32,34,37,40,41,43,46,48,51,53,54,57,60,62,64,65,66,68\n\n\n# Example output\n\n    . . . # # # . . . # . . . # #\n    . . . . . # . . . # . . . . #\n    . . . . . # . . . # . . . . .\n    . . . . . # . . . . # . . . .\n    # # # . . . # . . . . # . . .\n    . . . . . . . # . . . . . . .\n    . . . # # . . . # . . . . . .\n    . . . . . # . . . # . . . . .\n    . . . . . . # . . . # # . . .\n    . . . . . . . # . . . . . . .\n    . . . # . . . . # . . . # # #\n    . . . . # . . . . # . . . . .\n    . . . . . # . . . # . . . . .\n    # . . . . # . . . # . . . . .\n    # # . . . # . . . # # # . . .\n\n# Challenge inputs\n\n    #1: 15x15\n    A: 1,6,10,12,13,14,16,17,19,20,21,23,25,27,29,30,31,33,34,35,37,38,40,41,42,44,45,46,49,50\n    D: 1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,20,21,22,24,26,28,32,33,36,39,41,43,45,47,48\n\n    #2: 21x21\n    A: 1,4,7,10,12,14,16,17,18,19,21,24,25,26,27,29,30,32,34,35,36,38,39,40,42,45,46,48,49,51,52,54,55,56,57,58,59,61,63,64,66,67,69,70,73,74,75,76,77,79,81,82,84,85,87,89,90,92,94,96,97,99,100,101,102,103,104,105\n    D: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,19,20,22,23,24,28,31,33,37,38,41,42,43,44,45,47,50,52,53,60,62,63,64,65,67,68,71,72,74,78,80,81,83,84,86,88,89,91,93,95,98\n\n    #3: 27x27\n    A: 1,5,10,15,18,22,25,27,29,32,33,34,35,36,37,38,39,40,42,44,46,47,48,49,51,52,54,55,56,57,59,61,65,67,69,70,71,73,74,77,80,82,84,86,87,88,89,91,93,94,96,99,101,102,103,104,106,108,110,112,114,115,116,119,121,123,125,126,128,129,132,133,135,136,138,139,140,142,144,147,148,149,151,153,154,156,158,162,166,167,169,170,171,173,174,176,177,178,179,181,182,185,186,187,188,189,191,192,193,195,201,202,203,204,205,206,207,208\n    D: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,26,28,30,31,37,39,40,41,43,45,46,47,50,53,54,55,56,58,60,62,63,64,66,68,72,74,75,76,78,79,81,83,85,88,90,92,94,95,97,98,100,103,105,106,107,109,111,113,117,118,120,122,124,127,128,130,131,134,137,139,141,143,144,145,146,148,150,152,155,157,159,160,161,163,164,165,168,172,175,176,177,178,180,181,183,184,185,186,190,192,193,194,196,197,198,199,200\n\n    #4: 33x33\n    A: 1,5,13,19,23,25,28,29,30,33,34,35,36,37,38,42,43,48,49,50,51,56,58,60,61,62,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,83,86,88,89,90,93,94,96,100,101,102,105,107,108,109,110,111,112,114,116,117,118,120,121,122,126,127,128,130,131,133,134,135,138,139,141,142,143,145,146,149,151,152,154,155,159,160,163,165,166,167,168,172,173,174,175,176,178,180,181,183,185,187,188,189,190,191,192,193,194,197,199,200,201,202,203,205,207,208,209,210,212,213,215,216,217,220,222,223,224,226,227,228,230,233,234,235,236,238,242,244,246,247,248,249,250,252,253,254,255,256,259,260,263,265,271,276,277,278,279,280,281,282\n    D: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,35,38,39,40,41,42,43,44,45,46,47,51,52,53,54,55,56,57,59,61,63,73,74,75,77,82,83,84,85,87,88,89,90,91,92,95,97,98,99,100,101,102,103,104,106,110,113,115,116,118,119,123,124,125,126,127,129,132,134,135,136,137,140,142,143,144,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,167,168,169,170,171,176,177,178,179,182,184,185,186,187,192,194,195,196,198,201,202,204,206,208,209,211,213,214,215,216,217,218,219,221,223,225,226,229,231,232,233,237,239,240,241,243,244,245,248,251,253,255,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2020-01-24] Challenge #382 [Hard] Crossword grids", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_etf0al", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 122, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 122, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1579981085.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579893095.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Given the numbering of a crossword puzzle&amp;#39;s clues, find its grid.&lt;/p&gt;\n\n&lt;h1&gt;Background&lt;/h1&gt;\n\n&lt;p&gt;For the purpose of today&amp;#39;s challenge, a standard American crossword grid (like you would typically find in the New York Times) is an odd-dimension square grid of black and white squares with the following requirements:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The grid has 180 degree rotational symmetry.&lt;/li&gt;\n&lt;li&gt;The white squares form a single connected component. Squares are connected horizontally or vertically.&lt;/li&gt;\n&lt;li&gt;Every word is at least 3 letters long. A word is a horizontal (Across) or vertical (Down) run of white squares.&lt;/li&gt;\n&lt;li&gt;Every white square is checked, meaning it appears in both an Across word and a Down word. (Equivalently, there are no 1-letter words either.)&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/cosmologicon/918623145c549b9b4968d690550b3662\"&gt;Here are some examples of valid and invalid grids&lt;/a&gt;, using &lt;code&gt;.&lt;/code&gt; for white squares and &lt;code&gt;#&lt;/code&gt; for black squares.&lt;/p&gt;\n\n&lt;p&gt;Some of the squares in the crossword grid are numbered (&lt;a href=\"https://en.wikipedia.org/wiki/Crossword#/media/File:CrosswordUSA.svg\"&gt;here&amp;#39;s an example if you&amp;#39;re not familiar with crosswords&lt;/a&gt;). The numbers that appear in the grid are determined by the layout of black and white squares in the grid as follows:&lt;/p&gt;\n\n&lt;p&gt;The first white square in each word is numbered, starting at 1, then 2, 3, etc. &amp;quot;First&amp;quot; here means the leftmost square for Across clues, and the topmost square for Down clues. If a square is the first square in both an Across word and a Down word, it only gets one number. The numbering starts at the top left and goes left to right and then top to bottom.&lt;/p&gt;\n\n&lt;p&gt;The set of Across word numbers is the numbers in the squares that start Across clues, and the set of Down word numbers is the numbers in the squares that start Down clues.&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;Given a grid size and two lists of Across word numbers and Down word numbers, find a valid grid that matches the numbers. Inputs are guaranteed to have at least one valid solution, but it&amp;#39;s not guaranteed to be unique. Any valid output that matches the input is acceptable.&lt;/p&gt;\n\n&lt;p&gt;To complete this challenge, you must run your program all the way through to completion for at least one challenge input.&lt;/p&gt;\n\n&lt;h1&gt;Example input&lt;/h1&gt;\n\n&lt;p&gt;You are not required to use any particular input/output format. Feel free to hard code the input into your program.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;EXAMPLE: 15x15\nA: 1,4,7,10,13,14,16,17,18,20,21,23,24,26,28,29,33,35,36,38,39,42,44,45,47,49,50,52,55,56,58,59,61,63,67,69,70,71,72,73,74,75,76\nD: 1,2,3,4,5,6,7,8,9,11,12,15,19,22,25,27,29,30,31,32,34,37,40,41,43,46,48,51,53,54,57,60,62,64,65,66,68\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Example output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;. . . # # # . . . # . . . # #\n. . . . . # . . . # . . . . #\n. . . . . # . . . # . . . . .\n. . . . . # . . . . # . . . .\n# # # . . . # . . . . # . . .\n. . . . . . . # . . . . . . .\n. . . # # . . . # . . . . . .\n. . . . . # . . . # . . . . .\n. . . . . . # . . . # # . . .\n. . . . . . . # . . . . . . .\n. . . # . . . . # . . . # # #\n. . . . # . . . . # . . . . .\n. . . . . # . . . # . . . . .\n# . . . . # . . . # . . . . .\n# # . . . # . . . # # # . . .\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge inputs&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;#1: 15x15\nA: 1,6,10,12,13,14,16,17,19,20,21,23,25,27,29,30,31,33,34,35,37,38,40,41,42,44,45,46,49,50\nD: 1,2,3,4,5,6,7,8,9,10,11,12,15,17,18,20,21,22,24,26,28,32,33,36,39,41,43,45,47,48\n\n#2: 21x21\nA: 1,4,7,10,12,14,16,17,18,19,21,24,25,26,27,29,30,32,34,35,36,38,39,40,42,45,46,48,49,51,52,54,55,56,57,58,59,61,63,64,66,67,69,70,73,74,75,76,77,79,81,82,84,85,87,89,90,92,94,96,97,99,100,101,102,103,104,105\nD: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,19,20,22,23,24,28,31,33,37,38,41,42,43,44,45,47,50,52,53,60,62,63,64,65,67,68,71,72,74,78,80,81,83,84,86,88,89,91,93,95,98\n\n#3: 27x27\nA: 1,5,10,15,18,22,25,27,29,32,33,34,35,36,37,38,39,40,42,44,46,47,48,49,51,52,54,55,56,57,59,61,65,67,69,70,71,73,74,77,80,82,84,86,87,88,89,91,93,94,96,99,101,102,103,104,106,108,110,112,114,115,116,119,121,123,125,126,128,129,132,133,135,136,138,139,140,142,144,147,148,149,151,153,154,156,158,162,166,167,169,170,171,173,174,176,177,178,179,181,182,185,186,187,188,189,191,192,193,195,201,202,203,204,205,206,207,208\nD: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,26,28,30,31,37,39,40,41,43,45,46,47,50,53,54,55,56,58,60,62,63,64,66,68,72,74,75,76,78,79,81,83,85,88,90,92,94,95,97,98,100,103,105,106,107,109,111,113,117,118,120,122,124,127,128,130,131,134,137,139,141,143,144,145,146,148,150,152,155,157,159,160,161,163,164,165,168,172,175,176,177,178,180,181,183,184,185,186,190,192,193,194,196,197,198,199,200\n\n#4: 33x33\nA: 1,5,13,19,23,25,28,29,30,33,34,35,36,37,38,42,43,48,49,50,51,56,58,60,61,62,64,65,66,67,68,69,70,71,72,73,76,78,79,80,81,83,86,88,89,90,93,94,96,100,101,102,105,107,108,109,110,111,112,114,116,117,118,120,121,122,126,127,128,130,131,133,134,135,138,139,141,142,143,145,146,149,151,152,154,155,159,160,163,165,166,167,168,172,173,174,175,176,178,180,181,183,185,187,188,189,190,191,192,193,194,197,199,200,201,202,203,205,207,208,209,210,212,213,215,216,217,220,222,223,224,226,227,228,230,233,234,235,236,238,242,244,246,247,248,249,250,252,253,254,255,256,259,260,263,265,271,276,277,278,279,280,281,282\nD: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,31,32,33,35,38,39,40,41,42,43,44,45,46,47,51,52,53,54,55,56,57,59,61,63,73,74,75,77,82,83,84,85,87,88,89,90,91,92,95,97,98,99,100,101,102,103,104,106,110,113,115,116,118,119,123,124,125,126,127,129,132,134,135,136,137,140,142,143,144,147,148,149,150,151,153,154,156,157,158,159,160,161,162,164,167,168,169,170,171,176,177,178,179,182,184,185,186,187,192,194,195,196,198,201,202,204,206,208,209,211,213,214,215,216,217,218,219,221,223,225,226,229,231,232,233,237,239,240,241,243,244,245,248,251,253,255,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "etf0al", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 19, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/etf0al/20200124_challenge_382_hard_crossword_grids/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/etf0al/20200124_challenge_382_hard_crossword_grids/", "subreddit_subscribers": 224296, "created_utc": 1579893095.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Description\n\nThe game of Yahtzee is played by rolling five 6-sided dice, and scoring the results in a number of ways. You are given a Yahtzee dice roll, represented as a sorted list of 5 integers, each of which is between 1 and 6 inclusive. Your task is to find the maximum possible score for this roll in the upper section of the Yahtzee score card. Here's what that means.\n\nFor the purpose of this challenge, the upper section of Yahtzee gives you six possible ways to score a roll. 1 times the number of 1's in the roll, 2 times the number of 2's, 3 times the number of 3's, and so on up to 6 times the number of 6's. For instance, consider the roll `[2, 3, 5, 5, 6]`. If you scored this as 1's, the score would be 0, since there are no 1's in the roll. If you scored it as 2's, the score would be 2, since there's one 2 in the roll. Scoring the roll in each of the six ways gives you the six possible scores:\n\n    0 2 3 0 10 6\n\nThe maximum here is 10 (2x5), so your result should be 10.\n\n# Examples\n\n    yahtzee_upper([2, 3, 5, 5, 6]) =&gt; 10\n    yahtzee_upper([1, 1, 1, 1, 3]) =&gt; 4\n    yahtzee_upper([1, 1, 1, 3, 3]) =&gt; 6\n    yahtzee_upper([1, 2, 3, 4, 5]) =&gt; 5\n    yahtzee_upper([6, 6, 6, 6, 6]) =&gt; 30\n\n# Optional Bonus\n\nEfficiently handle inputs that are unsorted and much larger, both in the number of dice and in the number of sides per die. (For the purpose of this bonus challenge, you want the maximum value of some number k, times the number of times k appears in the input.)\n\n    yahtzee_upper([1654, 1654, 50995, 30864, 1654, 50995, 22747,\n        1654, 1654, 1654, 1654, 1654, 30864, 4868, 1654, 4868, 1654,\n        30864, 4868, 30864]) =&gt; 123456\n\nThere's no strict limit on how fast it needs to run. That depends on your language of choice. But for rough comparison, my Python solution on [this challenge input, consisting of 100,000 values between 1 and 999,999,999](https://gist.githubusercontent.com/cosmologicon/beadf49c9fe50a5c2a07ab8d68093bd0/raw/fb5af1a744faf79d64e2a3bb10973e642dc6f7b0/yahtzee-upper-1.txt) takes about 0.2 seconds (0.06 seconds not counting input parsing).\n\nIf you're preparing for a coding interview, this is a good opportunity to practice runtime complexity. Try to find a solution that's linear (O(N)) in both time and space requirements.\n\n*Thanks to u/Foenki for inspiring today's challenge in r/dailyprogrammer_ideas!*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2019-11-11] Challenge #381 [Easy] Yahtzee Upper Section Scoring", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_dv0231", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 200, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 200, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1573578296.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1573510743.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;The game of Yahtzee is played by rolling five 6-sided dice, and scoring the results in a number of ways. You are given a Yahtzee dice roll, represented as a sorted list of 5 integers, each of which is between 1 and 6 inclusive. Your task is to find the maximum possible score for this roll in the upper section of the Yahtzee score card. Here&amp;#39;s what that means.&lt;/p&gt;\n\n&lt;p&gt;For the purpose of this challenge, the upper section of Yahtzee gives you six possible ways to score a roll. 1 times the number of 1&amp;#39;s in the roll, 2 times the number of 2&amp;#39;s, 3 times the number of 3&amp;#39;s, and so on up to 6 times the number of 6&amp;#39;s. For instance, consider the roll &lt;code&gt;[2, 3, 5, 5, 6]&lt;/code&gt;. If you scored this as 1&amp;#39;s, the score would be 0, since there are no 1&amp;#39;s in the roll. If you scored it as 2&amp;#39;s, the score would be 2, since there&amp;#39;s one 2 in the roll. Scoring the roll in each of the six ways gives you the six possible scores:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0 2 3 0 10 6\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The maximum here is 10 (2x5), so your result should be 10.&lt;/p&gt;\n\n&lt;h1&gt;Examples&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;yahtzee_upper([2, 3, 5, 5, 6]) =&amp;gt; 10\nyahtzee_upper([1, 1, 1, 1, 3]) =&amp;gt; 4\nyahtzee_upper([1, 1, 1, 3, 3]) =&amp;gt; 6\nyahtzee_upper([1, 2, 3, 4, 5]) =&amp;gt; 5\nyahtzee_upper([6, 6, 6, 6, 6]) =&amp;gt; 30\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional Bonus&lt;/h1&gt;\n\n&lt;p&gt;Efficiently handle inputs that are unsorted and much larger, both in the number of dice and in the number of sides per die. (For the purpose of this bonus challenge, you want the maximum value of some number k, times the number of times k appears in the input.)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;yahtzee_upper([1654, 1654, 50995, 30864, 1654, 50995, 22747,\n    1654, 1654, 1654, 1654, 1654, 30864, 4868, 1654, 4868, 1654,\n    30864, 4868, 30864]) =&amp;gt; 123456\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;There&amp;#39;s no strict limit on how fast it needs to run. That depends on your language of choice. But for rough comparison, my Python solution on &lt;a href=\"https://gist.githubusercontent.com/cosmologicon/beadf49c9fe50a5c2a07ab8d68093bd0/raw/fb5af1a744faf79d64e2a3bb10973e642dc6f7b0/yahtzee-upper-1.txt\"&gt;this challenge input, consisting of 100,000 values between 1 and 999,999,999&lt;/a&gt; takes about 0.2 seconds (0.06 seconds not counting input parsing).&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re preparing for a coding interview, this is a good opportunity to practice runtime complexity. Try to find a solution that&amp;#39;s linear (O(N)) in both time and space requirements.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=\"/u/Foenki\"&gt;u/Foenki&lt;/a&gt; for inspiring today&amp;#39;s challenge in &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;r/dailyprogrammer_ideas&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 125, "id": "award_5f123e3d-4f48-42f4-9c11-e98b566d5897", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=16&amp;height=16&amp;auto=webp&amp;s=92932f465d58e4c16b12b6eac4ca07d27e3d11c0", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=32&amp;height=32&amp;auto=webp&amp;s=d11484a208d68a318bf9d4fcf371171a1cb6a7ef", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=48&amp;height=48&amp;auto=webp&amp;s=febdf28b6f39f7da7eb1365325b85e0bb49a9f63", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=64&amp;height=64&amp;auto=webp&amp;s=b4406a2d88bf86fa3dc8a45aacf7e0c7bdccc4fb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=128&amp;height=128&amp;auto=webp&amp;s=19555b13e3e196b62eeb9160d1ac1d1b372dcb0b", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "When you come across a feel-good thing.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Wholesome", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=16&amp;height=16&amp;auto=webp&amp;s=92932f465d58e4c16b12b6eac4ca07d27e3d11c0", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=32&amp;height=32&amp;auto=webp&amp;s=d11484a208d68a318bf9d4fcf371171a1cb6a7ef", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=48&amp;height=48&amp;auto=webp&amp;s=febdf28b6f39f7da7eb1365325b85e0bb49a9f63", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=64&amp;height=64&amp;auto=webp&amp;s=b4406a2d88bf86fa3dc8a45aacf7e0c7bdccc4fb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=128&amp;height=128&amp;auto=webp&amp;s=19555b13e3e196b62eeb9160d1ac1d1b372dcb0b", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png"}], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "dv0231", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 243, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/dv0231/20191111_challenge_381_easy_yahtzee_upper_section/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/dv0231/20191111_challenge_381_easy_yahtzee_upper_section/", "subreddit_subscribers": 224296, "created_utc": 1573510743.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "*Smooshed Morse code* means Morse code with the spaces between encoded letters left out. [See this week's Easy challenge for more detail.](https://www.reddit.com/r/dailyprogrammer/comments/cmd1hb/20190805_challenge_380_easy_smooshed_morse_code_1/) We'll also be stripping all punctuation, capitalization, and spacing, so the only encoded characters are the letters a-z.\n\nYour challenge today is to decode smooshed Morse code representations of English text. As I said in the Easy challenge, the decoding is ambiguous. You're not expected to do a perfect job, but the more your output resembles English, the better you're doing. You are not expected to reproduce the punctuation, just the spacing between words.\n\nA standard approach involves training on a corpus of English text. Last time I posted a similar challenge, [u/dreugeworst got excellent results this way](https://www.reddit.com/r/dailyprogrammer/comments/1z6flq/022814_challenge_151_hard_reemvoweler_2/cfqy5mx/). You can use any training data sources you want, but your program must run autonomously on the input, without human intervention.\n\nThe challenge inputs this time are all English-language movie quotes, some of which involve proper names, contractions (without the apostrophe), or other words you might not find in a standard word list.\n\n(I have no idea how difficult this is, so I'll be happy to provide challenge inputs that are easier/harder/shorter/longer/whatever.)\n\n# Example input\n\n    -.---..--.....--.--..-..-.--....--.--..-.--.-.....--.-......-....-......-...-.-......-.--.--.--\n\n# Example output\n\n    no im simply saying that life uh finds a way\n\n# Challenge inputs\n\nInput 1\n\n    ......---.--..--...-....-..-----.....-..-.--.-.-.-..-.--.-....-.-.-.....--..-..-...-.--.-...--..--.----.-.--..--...-.-.-.....--.--.....----.-.....-.-..----..-.-.-..-....--...-........-.---.-.....-..-.-.-.---.--.--...-....-...----....----.---.-..-..--...-...-..-.-.-..----.\n\nInput 2 (contains proper names)\n\n    ...--.--.-----.......---.---.-----..-...-----.-......-.--.....----.--.-.-..-..---......-...--.-...-..-------.--.-..-..---.....-...-....-....-.-...-.-.....-.--.---...-..-.-.--.-.-....--..-.-....-.--..--....-.---.....-...-..-..----...--.....-.-.-----..--.-..--......-...-.-.-----.---.--..-.-..-......--..-...-.-..----..-..-.---.........----..-.-..--.-....-.-..--.-....-.-..-..--.-.----.-.-.---.-...-...-..-...-.--.---..-...-.-..--....-.....-...-..--...-.---......---.-.--..--...........--...-.-.----.-.-..--.-.----.-.....--....---.-.-.....---.....-.--..--..-.-----.....-..-.-..-.-.-..-.--.--.-.--.-..-...-..-...--....---.-...-..-.-----.---..-.......--........-.....-.-.......---..-......--..-...-...-.-....-...-.-.......\n\nInput 3\n\n    -.-----..-.-..-......-.......-..........------..-..-.-..--.-..-.-....-.---..-..--...--.-....-.-...--.-.-..-...--.-..-.--..----...-.......-..-.------......--..-.-----..-..-----..-.--.---..-.-.....--.--.-...-..--.-----..-.-.-..-.........-.-.-..-.-.-....--.-----..-..--..--.-----.-.-..-.--.--......-.-.....-.......--...-.---.--.....-.-.-...-.....-...-...-.---.-.-..........-...-.-.....-...--..--....-...----..-....--..-..--...-..-.-----.--.....--.....----......-..--.......-.....-.-.------.-.-----..-.--.--.....--.--..-.-..-.-...--..-..-.-........----..--.......-.....-.-..--.-..-.....--.....-.-.-...-..-........-....----..-....-..-.--.-...----..-...-....-.....-.----..--..-..-.--..-.-.-.-...--.-..-......-...-.-----....-.------.-...---..-.....-.-..---..-.-.-.----.-.-.---.-...--......-.-..........-....-...-..-.-----..-..-..-..----.-..--....-..-.--......-..\n\n*Thanks to u/Separate_Memory for inspiring this challenge on r/dailyprogrammer_ideas!*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2019-08-09] Challenge #380 [Hard] Smooshed Morse Code 3", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_co5i4t", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 149, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 149, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1565371353.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;em&gt;Smooshed Morse code&lt;/em&gt; means Morse code with the spaces between encoded letters left out. &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/cmd1hb/20190805_challenge_380_easy_smooshed_morse_code_1/\"&gt;See this week&amp;#39;s Easy challenge for more detail.&lt;/a&gt; We&amp;#39;ll also be stripping all punctuation, capitalization, and spacing, so the only encoded characters are the letters a-z.&lt;/p&gt;\n\n&lt;p&gt;Your challenge today is to decode smooshed Morse code representations of English text. As I said in the Easy challenge, the decoding is ambiguous. You&amp;#39;re not expected to do a perfect job, but the more your output resembles English, the better you&amp;#39;re doing. You are not expected to reproduce the punctuation, just the spacing between words.&lt;/p&gt;\n\n&lt;p&gt;A standard approach involves training on a corpus of English text. Last time I posted a similar challenge, &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/1z6flq/022814_challenge_151_hard_reemvoweler_2/cfqy5mx/\"&gt;u/dreugeworst got excellent results this way&lt;/a&gt;. You can use any training data sources you want, but your program must run autonomously on the input, without human intervention.&lt;/p&gt;\n\n&lt;p&gt;The challenge inputs this time are all English-language movie quotes, some of which involve proper names, contractions (without the apostrophe), or other words you might not find in a standard word list.&lt;/p&gt;\n\n&lt;p&gt;(I have no idea how difficult this is, so I&amp;#39;ll be happy to provide challenge inputs that are easier/harder/shorter/longer/whatever.)&lt;/p&gt;\n\n&lt;h1&gt;Example input&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;-.---..--.....--.--..-..-.--....--.--..-.--.-.....--.-......-....-......-...-.-......-.--.--.--\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Example output&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;no im simply saying that life uh finds a way\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge inputs&lt;/h1&gt;\n\n&lt;p&gt;Input 1&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;......---.--..--...-....-..-----.....-..-.--.-.-.-..-.--.-....-.-.-.....--..-..-...-.--.-...--..--.----.-.--..--...-.-.-.....--.--.....----.-.....-.-..----..-.-.-..-....--...-........-.---.-.....-..-.-.-.---.--.--...-....-...----....----.---.-..-..--...-...-..-.-.-..----.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Input 2 (contains proper names)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gtn&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Input 3&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;-.-----..-.-..-......-.......-..........------..-..-.-..--.-..-.-....-.---..-..--...--.-....-.-...--.-.-..-...--.-..-.--..----...-.......-..-.------......--..-.-----..-..-----..-.--.---..-.-.....--.--.-...-..--.-----..-.-.-..-.........-.-.-..-.-.-....--.-----..-..--..--.-----.-.-..-.--.--......-.-.....-.......--...-.---.--.....-.-.-...-.....-...-...-.---.-.-..........-...-.-.....-...--..--....-...----..-....--..-..--...-..-.-----.--.....--.....----......-..--.......-.....-.-.------.-.-----..-.--.--.....--.--..-.-..-.-...--..-..-.-........----..--.......-.....-.-..--.-..-.....--.....-.-.-...-..-........-....----..-....-..-.--.-...----..-...-....-.....-.----..--..-..-.--..-.-.-.-...--.-..-......-...-.-----....-.------.-...---..-.....-.-..---..-.-.-.----.-.-.---.-...--......-.-..........-....-...-..-.-----..-..-..-..----.-..--....-..-.--......-..\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=\"/u/Separate_Memory\"&gt;u/Separate_Memory&lt;/a&gt; for inspiring this challenge on &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;r/dailyprogrammer_ideas&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "co5i4t", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/co5i4t/20190809_challenge_380_hard_smooshed_morse_code_3/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/co5i4t/20190809_challenge_380_hard_smooshed_morse_code_3/", "subreddit_subscribers": 224296, "created_utc": 1565371353.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "*Smooshed Morse code* means Morse code with the spaces or other delimiters between encoded letters left out. [See this week's Easy challenge for more detail.](https://www.reddit.com/r/dailyprogrammer/comments/cmd1hb/20190805_challenge_380_easy_smooshed_morse_code_1/)\n\nA *permutation of the alphabet* is a 26-character string in which each of the letters `a` through `z` appears once.\n\nGiven a smooshed Morse code encoding of a permutation of the alphabet, find the permutation it encodes, or any other permutation that produces the same encoding (in general there will be more than one). It's not enough to write a program that will eventually finish after a very long period of time: run your code through to completion for at least one example.\n\n# Examples\n\n    smalpha(\".--...-.-.-.....-.--........----.-.-..---.---.--.--.-.-....-..-...-.---..--.----..\")\n        =&gt; \"wirnbfzehatqlojpgcvusyxkmd\"\n    smalpha(\".----...---.-....--.-........-----....--.-..-.-..--.--...--..-.---.--..-.-...--..-\")\n        =&gt; \"wzjlepdsvothqfxkbgrmyicuna\"\n    smalpha(\"..-...-..-....--.---.---.---..-..--....-.....-..-.--.-.-.--.-..--.--..--.----..-..\")\n        =&gt; \"uvfsqmjazxthbidyrkcwegponl\"\n\nAgain, there's more than one valid output for these inputs.\n\n# Optional bonus 1\n\n[Here's a list of 1000 inputs.](https://gist.github.com/cosmologicon/415be8987a24a3abd07ba1dddc3cf389#file-smorse2-bonus1-in) How fast can you find the output for all of them? A good time depends on your language of choice and setup, so there's no specific time to aim for.\n\n# Optional bonus 2\n\nTypically, a valid input will have thousands of possible outputs. The object of this bonus challenge is to find a valid input with as few possible outputs as possible, while still having at least 1. The following encoded string has 41 decodings:\n\n    ......-..--...---.-....---...--....--.-..---.....---.-.---..---.-....--.-.---.-.--\n\nCan you do better? When this post is 7 days old, I'll award +1 gold medal flair to the submission with the fewest possible decodings. I'll break ties by taking the lexicographically first string. That is, I'll look at the first character where the two strings differ and award the one with a dash (`-`) in that position, since `-` is before `.` lexicographically.\n\n*Thanks to u/Separate_Memory for inspiring this week's challenges on r/dailyprogrammer_ideas!*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2019-08-07] Challenge #380 [Intermediate] Smooshed Morse Code 2", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_cn6gz5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 99, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 99, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1565188409.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1565187980.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;em&gt;Smooshed Morse code&lt;/em&gt; means Morse code with the spaces or other delimiters between encoded letters left out. &lt;a href=\"https://www.reddit.com/r/dailyprogrammer/comments/cmd1hb/20190805_challenge_380_easy_smooshed_morse_code_1/\"&gt;See this week&amp;#39;s Easy challenge for more detail.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;A &lt;em&gt;permutation of the alphabet&lt;/em&gt; is a 26-character string in which each of the letters &lt;code&gt;a&lt;/code&gt; through &lt;code&gt;z&lt;/code&gt; appears once.&lt;/p&gt;\n\n&lt;p&gt;Given a smooshed Morse code encoding of a permutation of the alphabet, find the permutation it encodes, or any other permutation that produces the same encoding (in general there will be more than one). It&amp;#39;s not enough to write a program that will eventually finish after a very long period of time: run your code through to completion for at least one example.&lt;/p&gt;\n\n&lt;h1&gt;Examples&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;smalpha(&amp;quot;.--...-.-.-.....-.--........----.-.-..---.---.--.--.-.-....-..-...-.---..--.----..&amp;quot;)\n    =&amp;gt; &amp;quot;wirnbfzehatqlojpgcvusyxkmd&amp;quot;\nsmalpha(&amp;quot;.----...---.-....--.-........-----....--.-..-.-..--.--...--..-.---.--..-.-...--..-&amp;quot;)\n    =&amp;gt; &amp;quot;wzjlepdsvothqfxkbgrmyicuna&amp;quot;\nsmalpha(&amp;quot;..-...-..-....--.---.---.---..-..--....-.....-..-.--.-.-.--.-..--.--..--.----..-..&amp;quot;)\n    =&amp;gt; &amp;quot;uvfsqmjazxthbidyrkcwegponl&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Again, there&amp;#39;s more than one valid output for these inputs.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus 1&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/cosmologicon/415be8987a24a3abd07ba1dddc3cf389#file-smorse2-bonus1-in\"&gt;Here&amp;#39;s a list of 1000 inputs.&lt;/a&gt; How fast can you find the output for all of them? A good time depends on your language of choice and setup, so there&amp;#39;s no specific time to aim for.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus 2&lt;/h1&gt;\n\n&lt;p&gt;Typically, a valid input will have thousands of possible outputs. The object of this bonus challenge is to find a valid input with as few possible outputs as possible, while still having at least 1. The following encoded string has 41 decodings:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;......-..--...---.-....---...--....--.-..---.....---.-.---..---.-....--.-.---.-.--\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Can you do better? When this post is 7 days old, I&amp;#39;ll award +1 gold medal flair to the submission with the fewest possible decodings. I&amp;#39;ll break ties by taking the lexicographically first string. That is, I&amp;#39;ll look at the first character where the two strings differ and award the one with a dash (&lt;code&gt;-&lt;/code&gt;) in that position, since &lt;code&gt;-&lt;/code&gt; is before &lt;code&gt;.&lt;/code&gt; lexicographically.&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=\"/u/Separate_Memory\"&gt;u/Separate_Memory&lt;/a&gt; for inspiring this week&amp;#39;s challenges on &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;r/dailyprogrammer_ideas&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "cn6gz5", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 57, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/cn6gz5/20190807_challenge_380_intermediate_smooshed/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/cn6gz5/20190807_challenge_380_intermediate_smooshed/", "subreddit_subscribers": 224296, "created_utc": 1565187980.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "For the purpose of this challenge, Morse code represents every letter as a sequence of 1-4 characters, each of which is either `.` (dot) or `-` (dash). The code for the letter `a` is `.-`, for `b` is `-...`, etc. The codes for each letter a through z are:\n\n    .- -... -.-. -.. . ..-. --. .... .. .--- -.- .-.. -- -. --- .--. --.- .-. ... - ..- ...- .-- -..- -.-- --..\n\nNormally, you would indicate where one letter ends and the next begins, for instance with a space between the letters' codes, but for this challenge, just smoosh all the coded letters together into a single string consisting of only dashes and dots.\n\n# Examples\n\n    smorse(\"sos\") =&gt; \"...---...\"\n    smorse(\"daily\") =&gt; \"-...-...-..-.--\"\n    smorse(\"programmer\") =&gt; \".--..-.-----..-..-----..-.\"\n    smorse(\"bits\") =&gt; \"-.....-...\"\n    smorse(\"three\") =&gt; \"-.....-...\"\n\nAn obvious problem with this system is that decoding is ambiguous. For instance, both `bits` and `three` encode to the same string, so you can't tell which one you would decode to without more information.\n\n# Optional bonus challenges\n\nFor these challenges, use the [enable1 word list](https://raw.githubusercontent.com/dolph/dictionary/master/enable1.txt). It contains 172,823 words. If you encode them all, you would get a total of 2,499,157 dots and 1,565,081 dashes.\n\n1. The sequence `-...-....-.--.` is the code for four different words (`needing`, `nervate`, `niding`, `tiling`). Find the only sequence that's the code for 13 different words.\n1. `autotomous` encodes to `.-..--------------..-...`, which has 14 dashes in a row. Find the only word that has 15 dashes in a row.\n1. Call a word *perfectly balanced* if its code has the same number of dots as dashes. `counterdemonstrations` is one of two 21-letter words that's perfectly balanced. Find the other one.\n1. `protectorate` is 12 letters long and encodes to `.--..-.----.-.-.----.-..--.`, which is a palindrome (i.e. the string is the same when reversed). Find the only 13-letter word that encodes to a palindrome.\n1. `--.---.---.--` is one of five 13-character sequences that does not appear in the encoding of any word. Find the other four.\n\n*Thanks to u/Separate_Memory for inspiring this challenge on r/dailyprogrammer_ideas!*", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2019-08-05] Challenge #380 [Easy] Smooshed Morse Code 1", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_cmd1hb", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 200, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 200, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1565021810.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For the purpose of this challenge, Morse code represents every letter as a sequence of 1-4 characters, each of which is either &lt;code&gt;.&lt;/code&gt; (dot) or &lt;code&gt;-&lt;/code&gt; (dash). The code for the letter &lt;code&gt;a&lt;/code&gt; is &lt;code&gt;.-&lt;/code&gt;, for &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;-...&lt;/code&gt;, etc. The codes for each letter a through z are:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;.- -... -.-. -.. . ..-. --. .... .. .--- -.- .-.. -- -. --- .--. --.- .-. ... - ..- ...- .-- -..- -.-- --..\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Normally, you would indicate where one letter ends and the next begins, for instance with a space between the letters&amp;#39; codes, but for this challenge, just smoosh all the coded letters together into a single string consisting of only dashes and dots.&lt;/p&gt;\n\n&lt;h1&gt;Examples&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;smorse(&amp;quot;sos&amp;quot;) =&amp;gt; &amp;quot;...---...&amp;quot;\nsmorse(&amp;quot;daily&amp;quot;) =&amp;gt; &amp;quot;-...-...-..-.--&amp;quot;\nsmorse(&amp;quot;programmer&amp;quot;) =&amp;gt; &amp;quot;.--..-.-----..-..-----..-.&amp;quot;\nsmorse(&amp;quot;bits&amp;quot;) =&amp;gt; &amp;quot;-.....-...&amp;quot;\nsmorse(&amp;quot;three&amp;quot;) =&amp;gt; &amp;quot;-.....-...&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;An obvious problem with this system is that decoding is ambiguous. For instance, both &lt;code&gt;bits&lt;/code&gt; and &lt;code&gt;three&lt;/code&gt; encode to the same string, so you can&amp;#39;t tell which one you would decode to without more information.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus challenges&lt;/h1&gt;\n\n&lt;p&gt;For these challenges, use the &lt;a href=\"https://raw.githubusercontent.com/dolph/dictionary/master/enable1.txt\"&gt;enable1 word list&lt;/a&gt;. It contains 172,823 words. If you encode them all, you would get a total of 2,499,157 dots and 1,565,081 dashes.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;The sequence &lt;code&gt;-...-....-.--.&lt;/code&gt; is the code for four different words (&lt;code&gt;needing&lt;/code&gt;, &lt;code&gt;nervate&lt;/code&gt;, &lt;code&gt;niding&lt;/code&gt;, &lt;code&gt;tiling&lt;/code&gt;). Find the only sequence that&amp;#39;s the code for 13 different words.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;autotomous&lt;/code&gt; encodes to &lt;code&gt;.-..--------------..-...&lt;/code&gt;, which has 14 dashes in a row. Find the only word that has 15 dashes in a row.&lt;/li&gt;\n&lt;li&gt;Call a word &lt;em&gt;perfectly balanced&lt;/em&gt; if its code has the same number of dots as dashes. &lt;code&gt;counterdemonstrations&lt;/code&gt; is one of two 21-letter words that&amp;#39;s perfectly balanced. Find the other one.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;protectorate&lt;/code&gt; is 12 letters long and encodes to &lt;code&gt;.--..-.----.-.-.----.-..--.&lt;/code&gt;, which is a palindrome (i.e. the string is the same when reversed). Find the only 13-letter word that encodes to a palindrome.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;--.---.---.--&lt;/code&gt; is one of five 13-character sequences that does not appear in the encoding of any word. Find the other four.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=\"/u/Separate_Memory\"&gt;u/Separate_Memory&lt;/a&gt; for inspiring this challenge on &lt;a href=\"/r/dailyprogrammer_ideas\"&gt;r/dailyprogrammer_ideas&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "cmd1hb", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 189, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/cmd1hb/20190805_challenge_380_easy_smooshed_morse_code_1/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/cmd1hb/20190805_challenge_380_easy_smooshed_morse_code_1/", "subreddit_subscribers": 224296, "created_utc": 1565021810.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Challenge\n\nThe nation of Examplania has the following income tax brackets:\n\n    income cap      marginal tax rate\n      \u00a410,000           0.00 (0%)\n      \u00a430,000           0.10 (10%)\n     \u00a4100,000           0.25 (25%)\n        --              0.40 (40%)\n\nIf you're not familiar with how tax brackets work, see the section below for an explanation.\n\nGiven a whole-number income amount up to \u00a4100,000,000, find the amount of tax owed in Examplania. Round down to a whole number of \u00a4.\n\n# Examples\n\n    tax(0) =&gt; 0\n    tax(10000) =&gt; 0\n    tax(10009) =&gt; 0\n    tax(10010) =&gt; 1\n    tax(12000) =&gt; 200\n    tax(56789) =&gt; 8697\n    tax(1234567) =&gt; 473326\n\n# Optional improvement\n\nOne way to improve your code is to make it easy to swap out different tax brackets, for instance by having the table in an input file. If you do this, you may assume that both the income caps and marginal tax rates are in increasing order, the highest bracket has no income cap, and all tax rates are whole numbers of percent (no more than two decimal places).\n\nHowever, because this is an Easy challenge, this part is optional, and you may hard code the tax brackets if you wish.\n\n# How tax brackets work\n\nA tax bracket is a range of income based on the income caps, and each tax bracket has a corresponding marginal tax rate, which applies to income within the bracket. In our example, the tax bracket for the range \u00a410,000 to \u00a430,000 has a marginal tax rate of 10%. Here's what that means for each bracket:\n\n* If your income is less than \u00a410,000, you owe 0 income tax.\n* If your income is between \u00a410,000 and \u00a430,000, you owe 10% income tax on the income that exceeds \u00a410,000. For instance, if your income is \u00a418,000, then your income in the 10% bracket is \u00a48,000. So your income tax is 10% of \u00a48,000, or \u00a4800.\n* If your income is between \u00a430,000 and \u00a4100,000, then you owe 10% of your income between \u00a410,000 and \u00a430,000, plus 25% of your income over \u00a430,000.\n* And finally, if your income is over \u00a4100,000, then you owe 10% of your income from \u00a410,000 to \u00a430,000, plus 25% of your income from \u00a430,000 to \u00a4100,000, plus 40% of your income above \u00a4100,000.\n\nOne aspect of progressive taxation is that increasing your income will never decrease the amount of tax that you owe, or your overall tax rate (except for rounding).\n\n# Optional bonus\n\nThe overall tax rate is simply the total tax divided by the total income. For example, an income of \u00a4256,250 has an overall tax of \u00a482,000, which is an overall tax rate of exactly 32%:\n\n    82000 = 0.00 \u00d7 10000 + 0.10 \u00d7 20000 + 0.25 \u00d7 70000 + 0.40 \u00d7 156250\n    82000 = 0.32 \u00d7 256250\n\nGiven a target overall tax rate, find the income amount that would be taxed at that overall rate in Examplania:\n\n    overall(0.00) =&gt; 0 (or anything up to 10000)\n    overall(0.06) =&gt; 25000\n    overall(0.09) =&gt; 34375\n    overall(0.32) =&gt; 256250\n    overall(0.40) =&gt; NaN (or anything to signify that no such income value exists)\n\nYou may get somewhat different answers because of rounding, but as long as it's close that's fine.\n\nThe simplest possibility is just to iterate and check the overall tax rate for each possible income. That works fine, but if you want a performance boost, check out binary search. You can also use algebra to reduce the number of calculations needed; just make it so that your code still gives correct answers if you swap out a different set of tax brackets.", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2019-07-15] Challenge #379 [Easy] Progressive taxation", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_cdieag", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 227, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 227, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1563237073.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1563202238.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;The nation of Examplania has the following income tax brackets:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;income cap      marginal tax rate\n  \u00a410,000           0.00 (0%)\n  \u00a430,000           0.10 (10%)\n \u00a4100,000           0.25 (25%)\n    --              0.40 (40%)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you&amp;#39;re not familiar with how tax brackets work, see the section below for an explanation.&lt;/p&gt;\n\n&lt;p&gt;Given a whole-number income amount up to \u00a4100,000,000, find the amount of tax owed in Examplania. Round down to a whole number of \u00a4.&lt;/p&gt;\n\n&lt;h1&gt;Examples&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;tax(0) =&amp;gt; 0\ntax(10000) =&amp;gt; 0\ntax(10009) =&amp;gt; 0\ntax(10010) =&amp;gt; 1\ntax(12000) =&amp;gt; 200\ntax(56789) =&amp;gt; 8697\ntax(1234567) =&amp;gt; 473326\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional improvement&lt;/h1&gt;\n\n&lt;p&gt;One way to improve your code is to make it easy to swap out different tax brackets, for instance by having the table in an input file. If you do this, you may assume that both the income caps and marginal tax rates are in increasing order, the highest bracket has no income cap, and all tax rates are whole numbers of percent (no more than two decimal places).&lt;/p&gt;\n\n&lt;p&gt;However, because this is an Easy challenge, this part is optional, and you may hard code the tax brackets if you wish.&lt;/p&gt;\n\n&lt;h1&gt;How tax brackets work&lt;/h1&gt;\n\n&lt;p&gt;A tax bracket is a range of income based on the income caps, and each tax bracket has a corresponding marginal tax rate, which applies to income within the bracket. In our example, the tax bracket for the range \u00a410,000 to \u00a430,000 has a marginal tax rate of 10%. Here&amp;#39;s what that means for each bracket:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If your income is less than \u00a410,000, you owe 0 income tax.&lt;/li&gt;\n&lt;li&gt;If your income is between \u00a410,000 and \u00a430,000, you owe 10% income tax on the income that exceeds \u00a410,000. For instance, if your income is \u00a418,000, then your income in the 10% bracket is \u00a48,000. So your income tax is 10% of \u00a48,000, or \u00a4800.&lt;/li&gt;\n&lt;li&gt;If your income is between \u00a430,000 and \u00a4100,000, then you owe 10% of your income between \u00a410,000 and \u00a430,000, plus 25% of your income over \u00a430,000.&lt;/li&gt;\n&lt;li&gt;And finally, if your income is over \u00a4100,000, then you owe 10% of your income from \u00a410,000 to \u00a430,000, plus 25% of your income from \u00a430,000 to \u00a4100,000, plus 40% of your income above \u00a4100,000.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;One aspect of progressive taxation is that increasing your income will never decrease the amount of tax that you owe, or your overall tax rate (except for rounding).&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus&lt;/h1&gt;\n\n&lt;p&gt;The overall tax rate is simply the total tax divided by the total income. For example, an income of \u00a4256,250 has an overall tax of \u00a482,000, which is an overall tax rate of exactly 32%:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;82000 = 0.00 \u00d7 10000 + 0.10 \u00d7 20000 + 0.25 \u00d7 70000 + 0.40 \u00d7 156250\n82000 = 0.32 \u00d7 256250\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Given a target overall tax rate, find the income amount that would be taxed at that overall rate in Examplania:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;overall(0.00) =&amp;gt; 0 (or anything up to 10000)\noverall(0.06) =&amp;gt; 25000\noverall(0.09) =&amp;gt; 34375\noverall(0.32) =&amp;gt; 256250\noverall(0.40) =&amp;gt; NaN (or anything to signify that no such income value exists)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may get somewhat different answers because of rounding, but as long as it&amp;#39;s close that&amp;#39;s fine.&lt;/p&gt;\n\n&lt;p&gt;The simplest possibility is just to iterate and check the overall tax rate for each possible income. That works fine, but if you want a performance boost, check out binary search. You can also use algebra to reduce the number of calculations needed; just make it so that your code still gives correct answers if you swap out a different set of tax brackets.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "cdieag", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 169, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/cdieag/20190715_challenge_379_easy_progressive_taxation/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/cdieag/20190715_challenge_379_easy_progressive_taxation/", "subreddit_subscribers": 224296, "created_utc": 1563202238.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "It was a dark and stormy night. Detective Havel and Detective Hakimi arrived at the scene of the crime.\n\nOther than the detectives, there were 10 people present. They asked the first person, \"out of the 9 other people here, how many had you already met before tonight?\" The person answered \"5\". They asked the same question of the second person, who answered \"3\". And so on. The 10 answers they got from the 10 people were:\n\n    5 3 0 2 6 2 0 7 2 5\n\nThe detectives looked at the answers carefully and deduced that there was an inconsistency, and that somebody must be lying. (For the purpose of this challenge, assume that nobody makes mistakes or forgets, and if X has met Y, that means Y has also met X.)\n\nYour challenge for today is, given a sequence of answers to the question \"how many of the others had you met before tonight?\", apply the Havel-Hakimi algorithm to determine whether or not it's possible that everyone was telling the truth.\n\nIf you're feeling up to it, skip ahead to the Challenge section below. Otherwise, try as many of the optional warmup questions as you want first, before attempting the full challenge.\n\n# Optional Warmup 1: eliminating 0's.\n\nGiven a sequence of answers, return the same set of answers with all the 0's removed.\n\n    warmup1([5, 3, 0, 2, 6, 2, 0, 7, 2, 5]) =&gt; [5, 3, 2, 6, 2, 7, 2, 5]\n    warmup1([4, 0, 0, 1, 3]) =&gt; [4, 1, 3]\n    warmup1([1, 2, 3]) =&gt; [1, 2, 3]\n    warmup1([0, 0, 0]) =&gt; []\n    warmup1([]) =&gt; []\n\nIf you want to reorder the sequence as you do this, that's fine. For instance, given `[4, 0, 0, 1, 3]`, then you may return `[4, 1, 3]` or `[1, 3, 4]` or `[4, 3, 1]` or any other ordering of these numbers.\n\n# Optional Warmup 2: descending sort\n\nGiven a sequence of answers, return the sequence sorted in descending order, so that the first number is the largest and the last number is the smallest.\n\n    warmup2([5, 1, 3, 4, 2]) =&gt; [5, 4, 3, 2, 1]\n    warmup2([0, 0, 0, 4, 0]) =&gt; [4, 0, 0, 0, 0]\n    warmup2([1]) =&gt; [1]\n    warmup2([]) =&gt; []\n\n# Optional Warmup 3: length check\n\nGiven a number `N` and a sequence of answers, return true if `N` is greater than the number of answers (i.e. the length of the sequence), and false if `N` is less than or equal to the number of answers. For instance, given 7 and [6, 5, 5, 3, 2, 2, 2], you would return false, because 7 is less than or equal to 7.\n\n    warmup3(7, [6, 5, 5, 3, 2, 2, 2]) =&gt; false\n    warmup3(5, [5, 5, 5, 5, 5]) =&gt; false\n    warmup3(5, [5, 5, 5, 5]) =&gt; true\n    warmup3(3, [1, 1]) =&gt; true\n    warmup3(1, []) =&gt; true\n    warmup3(0, []) =&gt; false\n\n# Optional Warmup 4: front elimination\n\nGiven a number `N` and a sequence in descending order, subtract 1 from each of the first `N` answers in the sequence, and return the result. For instance, given `N = 4` and the sequence `[5, 4, 3, 2, 1]`, you would subtract 1 from each of the first 4 answers (5, 4, 3, and 2) to get 4, 3, 2, and 1. The rest of the sequence (1) would not be affected:\n\n    warmup4(4, [5, 4, 3, 2, 1]) =&gt; [4, 3, 2, 1, 1]\n    warmup4(11, [14, 13, 13, 13, 12, 10, 8, 8, 7, 7, 6, 6, 4, 4, 2]) =&gt; [13, 12, 12, 12, 11, 9, 7, 7, 6, 6, 5, 6, 4, 4, 2]\n    warmup4(1, [10, 10, 10]) =&gt; [9, 10, 10]\n    warmup4(3, [10, 10, 10]) =&gt; [9, 9, 9]\n    warmup4(1, [1]) =&gt; [0]\n\nYou may assume that `N` is greater than 0, and no greater than the length of the sequence. Like in warmup 1, it's okay if you want to reorder the answers in your result.\n\n# Challenge: the Havel-Hakimi algorithm\n\nPerform the Havel-Hakimi algorithm on a given sequence of answers. This algorithm will return true if the answers are consistent (i.e. it's possible that everyone is telling the truth) and false if the answers are inconsistent (i.e. someone must be lying):\n\n1. Remove all 0's from the sequence (i.e. `warmup1`).\n2. If the sequence is now empty (no elements left), stop and return true.\n3. Sort the sequence in descending order (i.e. `warmup2`).\n4. Remove the first answer (which is also the largest answer, or tied for the largest) from the sequence and call it `N`. The sequence is now 1 shorter than it was after the previous step.\n5. If `N` is greater than the length of this new sequence (i.e. `warmup3`), stop and return false.\n6. Subtract 1 from each of the first `N` elements of the new sequence (i.e. `warmup4`).\n7. Continue from step 1 using the sequence from the previous step.\n\nEventually you'll either return true in step 2, or false in step 5.\n\nYou don't have to follow these steps exactly: as long as you return the right answer, that's fine. Also, if you answered the warmup questions, you may use your warmup solutions to build your challenge solution, but you don't have to.\n\n    hh([5, 3, 0, 2, 6, 2, 0, 7, 2, 5]) =&gt; false\n    hh([4, 2, 0, 1, 5, 0]) =&gt; false\n    hh([3, 1, 2, 3, 1, 0]) =&gt; true\n    hh([16, 9, 9, 15, 9, 7, 9, 11, 17, 11, 4, 9, 12, 14, 14, 12, 17, 0, 3, 16]) =&gt; true\n    hh([14, 10, 17, 13, 4, 8, 6, 7, 13, 13, 17, 18, 8, 17, 2, 14, 6, 4, 7, 12]) =&gt; true\n    hh([15, 18, 6, 13, 12, 4, 4, 14, 1, 6, 18, 2, 6, 16, 0, 9, 10, 7, 12, 3]) =&gt; false\n    hh([6, 0, 10, 10, 10, 5, 8, 3, 0, 14, 16, 2, 13, 1, 2, 13, 6, 15, 5, 1]) =&gt; false\n    hh([2, 2, 0]) =&gt; false\n    hh([3, 2, 1]) =&gt; false\n    hh([1, 1]) =&gt; true\n    hh([1]) =&gt; false\n    hh([]) =&gt; true\n\n# Detailed example\n\nHere's the first pass through the algorithm using the original example:\n\n* `[5, 3, 0, 2, 6, 2, 0, 7, 2, 5]`  - Starting sequence\n* `[5, 3, 2, 6, 2, 7, 2, 5]`  - After step 1, removing 0's.\n* Step 2: This sequence is not empty, so go on to step 3.\n* `[7, 6, 5, 5, 3, 2, 2, 2]`  - After step 3, sorting in descending order.\n* `[6, 5, 5, 3, 2, 2, 2]` - After step 4, removing the first answer `N = 7`.\n* Step 5: N (7) is less than or equal to the number of answers remaining in the sequence (7), so go on to step 6.\n* `[5, 4, 4, 2, 1, 1, 1]` - After step 6, subtracting 1 from each of the first 7 answers (which is all of them in this case).\n\nAt this point you would start over at step 1 with the sequence `[5, 4, 4, 2, 1, 1, 1]`. After your second pass through the algorithm, your sequence will be `[3, 3, 1, 0, 0, 1]`, so start back at step 1 with this sequence. After your third pass you'll have `[2, 0, 0]`. On your fourth pass, you'll stop at step 5, because you'll have `N = 2` and an empty sequence (`[]`), and 2 &gt; 0, so you will return false.", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2019-05-20] Challenge #378 [Easy] The Havel-Hakimi algorithm for graph realization", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_bqy1cf", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 244, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 244, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1558371909.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1558370981.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;It was a dark and stormy night. Detective Havel and Detective Hakimi arrived at the scene of the crime.&lt;/p&gt;\n\n&lt;p&gt;Other than the detectives, there were 10 people present. They asked the first person, &amp;quot;out of the 9 other people here, how many had you already met before tonight?&amp;quot; The person answered &amp;quot;5&amp;quot;. They asked the same question of the second person, who answered &amp;quot;3&amp;quot;. And so on. The 10 answers they got from the 10 people were:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;5 3 0 2 6 2 0 7 2 5\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The detectives looked at the answers carefully and deduced that there was an inconsistency, and that somebody must be lying. (For the purpose of this challenge, assume that nobody makes mistakes or forgets, and if X has met Y, that means Y has also met X.)&lt;/p&gt;\n\n&lt;p&gt;Your challenge for today is, given a sequence of answers to the question &amp;quot;how many of the others had you met before tonight?&amp;quot;, apply the Havel-Hakimi algorithm to determine whether or not it&amp;#39;s possible that everyone was telling the truth.&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re feeling up to it, skip ahead to the Challenge section below. Otherwise, try as many of the optional warmup questions as you want first, before attempting the full challenge.&lt;/p&gt;\n\n&lt;h1&gt;Optional Warmup 1: eliminating 0&amp;#39;s.&lt;/h1&gt;\n\n&lt;p&gt;Given a sequence of answers, return the same set of answers with all the 0&amp;#39;s removed.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;warmup1([5, 3, 0, 2, 6, 2, 0, 7, 2, 5]) =&amp;gt; [5, 3, 2, 6, 2, 7, 2, 5]\nwarmup1([4, 0, 0, 1, 3]) =&amp;gt; [4, 1, 3]\nwarmup1([1, 2, 3]) =&amp;gt; [1, 2, 3]\nwarmup1([0, 0, 0]) =&amp;gt; []\nwarmup1([]) =&amp;gt; []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to reorder the sequence as you do this, that&amp;#39;s fine. For instance, given &lt;code&gt;[4, 0, 0, 1, 3]&lt;/code&gt;, then you may return &lt;code&gt;[4, 1, 3]&lt;/code&gt; or &lt;code&gt;[1, 3, 4]&lt;/code&gt; or &lt;code&gt;[4, 3, 1]&lt;/code&gt; or any other ordering of these numbers.&lt;/p&gt;\n\n&lt;h1&gt;Optional Warmup 2: descending sort&lt;/h1&gt;\n\n&lt;p&gt;Given a sequence of answers, return the sequence sorted in descending order, so that the first number is the largest and the last number is the smallest.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;warmup2([5, 1, 3, 4, 2]) =&amp;gt; [5, 4, 3, 2, 1]\nwarmup2([0, 0, 0, 4, 0]) =&amp;gt; [4, 0, 0, 0, 0]\nwarmup2([1]) =&amp;gt; [1]\nwarmup2([]) =&amp;gt; []\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional Warmup 3: length check&lt;/h1&gt;\n\n&lt;p&gt;Given a number &lt;code&gt;N&lt;/code&gt; and a sequence of answers, return true if &lt;code&gt;N&lt;/code&gt; is greater than the number of answers (i.e. the length of the sequence), and false if &lt;code&gt;N&lt;/code&gt; is less than or equal to the number of answers. For instance, given 7 and [6, 5, 5, 3, 2, 2, 2], you would return false, because 7 is less than or equal to 7.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;warmup3(7, [6, 5, 5, 3, 2, 2, 2]) =&amp;gt; false\nwarmup3(5, [5, 5, 5, 5, 5]) =&amp;gt; false\nwarmup3(5, [5, 5, 5, 5]) =&amp;gt; true\nwarmup3(3, [1, 1]) =&amp;gt; true\nwarmup3(1, []) =&amp;gt; true\nwarmup3(0, []) =&amp;gt; false\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional Warmup 4: front elimination&lt;/h1&gt;\n\n&lt;p&gt;Given a number &lt;code&gt;N&lt;/code&gt; and a sequence in descending order, subtract 1 from each of the first &lt;code&gt;N&lt;/code&gt; answers in the sequence, and return the result. For instance, given &lt;code&gt;N = 4&lt;/code&gt; and the sequence &lt;code&gt;[5, 4, 3, 2, 1]&lt;/code&gt;, you would subtract 1 from each of the first 4 answers (5, 4, 3, and 2) to get 4, 3, 2, and 1. The rest of the sequence (1) would not be affected:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;warmup4(4, [5, 4, 3, 2, 1]) =&amp;gt; [4, 3, 2, 1, 1]\nwarmup4(11, [14, 13, 13, 13, 12, 10, 8, 8, 7, 7, 6, 6, 4, 4, 2]) =&amp;gt; [13, 12, 12, 12, 11, 9, 7, 7, 6, 6, 5, 6, 4, 4, 2]\nwarmup4(1, [10, 10, 10]) =&amp;gt; [9, 10, 10]\nwarmup4(3, [10, 10, 10]) =&amp;gt; [9, 9, 9]\nwarmup4(1, [1]) =&amp;gt; [0]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You may assume that &lt;code&gt;N&lt;/code&gt; is greater than 0, and no greater than the length of the sequence. Like in warmup 1, it&amp;#39;s okay if you want to reorder the answers in your result.&lt;/p&gt;\n\n&lt;h1&gt;Challenge: the Havel-Hakimi algorithm&lt;/h1&gt;\n\n&lt;p&gt;Perform the Havel-Hakimi algorithm on a given sequence of answers. This algorithm will return true if the answers are consistent (i.e. it&amp;#39;s possible that everyone is telling the truth) and false if the answers are inconsistent (i.e. someone must be lying):&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Remove all 0&amp;#39;s from the sequence (i.e. &lt;code&gt;warmup1&lt;/code&gt;).&lt;/li&gt;\n&lt;li&gt;If the sequence is now empty (no elements left), stop and return true.&lt;/li&gt;\n&lt;li&gt;Sort the sequence in descending order (i.e. &lt;code&gt;warmup2&lt;/code&gt;).&lt;/li&gt;\n&lt;li&gt;Remove the first answer (which is also the largest answer, or tied for the largest) from the sequence and call it &lt;code&gt;N&lt;/code&gt;. The sequence is now 1 shorter than it was after the previous step.&lt;/li&gt;\n&lt;li&gt;If &lt;code&gt;N&lt;/code&gt; is greater than the length of this new sequence (i.e. &lt;code&gt;warmup3&lt;/code&gt;), stop and return false.&lt;/li&gt;\n&lt;li&gt;Subtract 1 from each of the first &lt;code&gt;N&lt;/code&gt; elements of the new sequence (i.e. &lt;code&gt;warmup4&lt;/code&gt;).&lt;/li&gt;\n&lt;li&gt;Continue from step 1 using the sequence from the previous step.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Eventually you&amp;#39;ll either return true in step 2, or false in step 5.&lt;/p&gt;\n\n&lt;p&gt;You don&amp;#39;t have to follow these steps exactly: as long as you return the right answer, that&amp;#39;s fine. Also, if you answered the warmup questions, you may use your warmup solutions to build your challenge solution, but you don&amp;#39;t have to.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;hh([5, 3, 0, 2, 6, 2, 0, 7, 2, 5]) =&amp;gt; false\nhh([4, 2, 0, 1, 5, 0]) =&amp;gt; false\nhh([3, 1, 2, 3, 1, 0]) =&amp;gt; true\nhh([16, 9, 9, 15, 9, 7, 9, 11, 17, 11, 4, 9, 12, 14, 14, 12, 17, 0, 3, 16]) =&amp;gt; true\nhh([14, 10, 17, 13, 4, 8, 6, 7, 13, 13, 17, 18, 8, 17, 2, 14, 6, 4, 7, 12]) =&amp;gt; true\nhh([15, 18, 6, 13, 12, 4, 4, 14, 1, 6, 18, 2, 6, 16, 0, 9, 10, 7, 12, 3]) =&amp;gt; false\nhh([6, 0, 10, 10, 10, 5, 8, 3, 0, 14, 16, 2, 13, 1, 2, 13, 6, 15, 5, 1]) =&amp;gt; false\nhh([2, 2, 0]) =&amp;gt; false\nhh([3, 2, 1]) =&amp;gt; false\nhh([1, 1]) =&amp;gt; true\nhh([1]) =&amp;gt; false\nhh([]) =&amp;gt; true\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Detailed example&lt;/h1&gt;\n\n&lt;p&gt;Here&amp;#39;s the first pass through the algorithm using the original example:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;[5, 3, 0, 2, 6, 2, 0, 7, 2, 5]&lt;/code&gt;  - Starting sequence&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;[5, 3, 2, 6, 2, 7, 2, 5]&lt;/code&gt;  - After step 1, removing 0&amp;#39;s.&lt;/li&gt;\n&lt;li&gt;Step 2: This sequence is not empty, so go on to step 3.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;[7, 6, 5, 5, 3, 2, 2, 2]&lt;/code&gt;  - After step 3, sorting in descending order.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;[6, 5, 5, 3, 2, 2, 2]&lt;/code&gt; - After step 4, removing the first answer &lt;code&gt;N = 7&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Step 5: N (7) is less than or equal to the number of answers remaining in the sequence (7), so go on to step 6.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;[5, 4, 4, 2, 1, 1, 1]&lt;/code&gt; - After step 6, subtracting 1 from each of the first 7 answers (which is all of them in this case).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;At this point you would start over at step 1 with the sequence &lt;code&gt;[5, 4, 4, 2, 1, 1, 1]&lt;/code&gt;. After your second pass through the algorithm, your sequence will be &lt;code&gt;[3, 3, 1, 0, 0, 1]&lt;/code&gt;, so start back at step 1 with this sequence. After your third pass you&amp;#39;ll have &lt;code&gt;[2, 0, 0]&lt;/code&gt;. On your fourth pass, you&amp;#39;ll stop at step 5, because you&amp;#39;ll have &lt;code&gt;N = 2&lt;/code&gt; and an empty sequence (&lt;code&gt;[]&lt;/code&gt;), and 2 &amp;gt; 0, so you will return false.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "bqy1cf", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 266, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/bqy1cf/20190520_challenge_378_easy_the_havelhakimi/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/bqy1cf/20190520_challenge_378_easy_the_havelhakimi/", "subreddit_subscribers": 224296, "created_utc": 1558370981.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Description\n\nYou have a 2-dimensional rectangular crate of size X by Y, and a bunch of boxes, each of size x by y. The dimensions are all positive integers.\n\nGiven X, Y, x, and y, determine how many boxes can fit into a single crate if they have to be placed so that the x-axis of the boxes is aligned with the x-axis of the crate, and the y-axis of the boxes is aligned with the y-axis of the crate. That is, you can't rotate the boxes. The best you can do is to build a rectangle of boxes as large as possible in each dimension.\n\nFor instance, if the crate is size X = 25 by Y = 18, and the boxes are size x = 6 by y = 5, then the answer is 12. You can fit 4 boxes along the x-axis (because 6\\*4 &lt;= 25), and 3 boxes along the y-axis (because 5\\*3 &lt;= 18), so in total you can fit 4*3 = 12 boxes in a rectangle.\n\n# Examples\n\n    fit1(25, 18, 6, 5) =&gt; 12\n    fit1(10, 10, 1, 1) =&gt; 100\n    fit1(12, 34, 5, 6) =&gt; 10\n    fit1(12345, 678910, 1112, 1314) =&gt; 5676\n    fit1(5, 100, 6, 1) =&gt; 0\n\n# Optional bonus `fit2`\n\nYou upgrade your packing robot with the latest in packing technology: turning stuff. You now have the option of rotating *all* boxes by 90 degrees, so that you can treat a set of 6-by-5 boxes as a set of 5-by-6 boxes. You do **not** have the option of rotating some of the boxes but not others.\n\n    fit2(25, 18, 6, 5) =&gt; 15\n    fit2(12, 34, 5, 6) =&gt; 12\n    fit2(12345, 678910, 1112, 1314) =&gt; 5676\n    fit2(5, 5, 3, 2) =&gt; 2\n    fit2(5, 100, 6, 1) =&gt; 80\n    fit2(5, 5, 6, 1) =&gt; 0\n\n*Hint: is there an easy way to define `fit2` in terms of `fit1`?*\n\nNote that this is not the maximum possible number of boxes you could get if you rotated them independently. For instance, if you're fitting 3-by-2 boxes into a 5-by-5 crate, it's possible to fit 4 by varying the orientations, but `fit2(5, 5, 3, 2)` is 2, not 4. Handling the general case is much more complicated, and beyond the scope of today's challenge.\n\n# Optional bonus `fit3`\n\nYou upgrade your warehouse to the third dimension. You're now given six parameters, X, Y, Z, x, y, and z. That is, you're given the X, Y, and Z dimensions of the crate, and the x, y, and z dimensions of the boxes. There are now six different possible orientations of the boxes. Again, boxes cannot be rotated independently: they all have to have the same orientation.\n\n    fit3(10, 10, 10, 1, 1, 1) =&gt; 1000\n    fit3(12, 34, 56, 7, 8, 9) =&gt; 32\n    fit3(123, 456, 789, 10, 11, 12) =&gt; 32604\n    fit3(1234567, 89101112, 13141516, 171819, 202122, 232425)) =&gt; 174648\n\n# Optional bonus `fitn`\n\nYou upgrade your warehouse to the Nth dimension. Now you take a list of N crate dimensions, and N box dimensions. Assume that the boxes may be rotated in any of N! orientations so that each axis of the crate aligns with a different axis of the boxes. Again, boxes cannot be rotated independently.\n\n    fitn([3, 4], [1, 2]) =&gt; 6\n    fitn([123, 456, 789], [10, 11, 12]) =&gt; 32604\n    fitn([123, 456, 789, 1011, 1213, 1415], [16, 17, 18, 19, 20, 21]) =&gt; 1883443968\n\nEDIT: if you want even more of a challenge, do this in fewer than O(N!) operations. There's no specific time goal, but my Python program finds the following solution for N = 20 in about 10 seconds:\n\n    fitn([180598, 125683, 146932, 158296, 171997, 204683, 193694, 216231, 177673, 169317, 216456, 220003, 165939, 205613, 152779, 177216, 128838, 126894, 210076, 148407], [1984, 2122, 1760, 2059, 1278, 2017, 1443, 2223, 2169, 1502, 1274, 1740, 1740, 1768, 1295, 1916, 2249, 2036, 1886, 2010]) =&gt; 4281855455197643306306491981973422080000", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2019-04-08] Challenge #377 [Easy] Axis-aligned crate packing", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_bazy5j", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 167, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 167, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1554774679.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1554761779.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;You have a 2-dimensional rectangular crate of size X by Y, and a bunch of boxes, each of size x by y. The dimensions are all positive integers.&lt;/p&gt;\n\n&lt;p&gt;Given X, Y, x, and y, determine how many boxes can fit into a single crate if they have to be placed so that the x-axis of the boxes is aligned with the x-axis of the crate, and the y-axis of the boxes is aligned with the y-axis of the crate. That is, you can&amp;#39;t rotate the boxes. The best you can do is to build a rectangle of boxes as large as possible in each dimension.&lt;/p&gt;\n\n&lt;p&gt;For instance, if the crate is size X = 25 by Y = 18, and the boxes are size x = 6 by y = 5, then the answer is 12. You can fit 4 boxes along the x-axis (because 6*4 &amp;lt;= 25), and 3 boxes along the y-axis (because 5*3 &amp;lt;= 18), so in total you can fit 4*3 = 12 boxes in a rectangle.&lt;/p&gt;\n\n&lt;h1&gt;Examples&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;fit1(25, 18, 6, 5) =&amp;gt; 12\nfit1(10, 10, 1, 1) =&amp;gt; 100\nfit1(12, 34, 5, 6) =&amp;gt; 10\nfit1(12345, 678910, 1112, 1314) =&amp;gt; 5676\nfit1(5, 100, 6, 1) =&amp;gt; 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional bonus &lt;code&gt;fit2&lt;/code&gt;&lt;/h1&gt;\n\n&lt;p&gt;You upgrade your packing robot with the latest in packing technology: turning stuff. You now have the option of rotating &lt;em&gt;all&lt;/em&gt; boxes by 90 degrees, so that you can treat a set of 6-by-5 boxes as a set of 5-by-6 boxes. You do &lt;strong&gt;not&lt;/strong&gt; have the option of rotating some of the boxes but not others.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fit2(25, 18, 6, 5) =&amp;gt; 15\nfit2(12, 34, 5, 6) =&amp;gt; 12\nfit2(12345, 678910, 1112, 1314) =&amp;gt; 5676\nfit2(5, 5, 3, 2) =&amp;gt; 2\nfit2(5, 100, 6, 1) =&amp;gt; 80\nfit2(5, 5, 6, 1) =&amp;gt; 0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;em&gt;Hint: is there an easy way to define &lt;code&gt;fit2&lt;/code&gt; in terms of &lt;code&gt;fit1&lt;/code&gt;?&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;Note that this is not the maximum possible number of boxes you could get if you rotated them independently. For instance, if you&amp;#39;re fitting 3-by-2 boxes into a 5-by-5 crate, it&amp;#39;s possible to fit 4 by varying the orientations, but &lt;code&gt;fit2(5, 5, 3, 2)&lt;/code&gt; is 2, not 4. Handling the general case is much more complicated, and beyond the scope of today&amp;#39;s challenge.&lt;/p&gt;\n\n&lt;h1&gt;Optional bonus &lt;code&gt;fit3&lt;/code&gt;&lt;/h1&gt;\n\n&lt;p&gt;You upgrade your warehouse to the third dimension. You&amp;#39;re now given six parameters, X, Y, Z, x, y, and z. That is, you&amp;#39;re given the X, Y, and Z dimensions of the crate, and the x, y, and z dimensions of the boxes. There are now six different possible orientations of the boxes. Again, boxes cannot be rotated independently: they all have to have the same orientation.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fit3(10, 10, 10, 1, 1, 1) =&amp;gt; 1000\nfit3(12, 34, 56, 7, 8, 9) =&amp;gt; 32\nfit3(123, 456, 789, 10, 11, 12) =&amp;gt; 32604\nfit3(1234567, 89101112, 13141516, 171819, 202122, 232425)) =&amp;gt; 174648\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional bonus &lt;code&gt;fitn&lt;/code&gt;&lt;/h1&gt;\n\n&lt;p&gt;You upgrade your warehouse to the Nth dimension. Now you take a list of N crate dimensions, and N box dimensions. Assume that the boxes may be rotated in any of N! orientations so that each axis of the crate aligns with a different axis of the boxes. Again, boxes cannot be rotated independently.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fitn([3, 4], [1, 2]) =&amp;gt; 6\nfitn([123, 456, 789], [10, 11, 12]) =&amp;gt; 32604\nfitn([123, 456, 789, 1011, 1213, 1415], [16, 17, 18, 19, 20, 21]) =&amp;gt; 1883443968\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;EDIT: if you want even more of a challenge, do this in fewer than O(N!) operations. There&amp;#39;s no specific time goal, but my Python program finds the following solution for N = 20 in about 10 seconds:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fitn([180598, 125683, 146932, 158296, 171997, 204683, 193694, 216231, 177673, 169317, 216456, 220003, 165939, 205613, 152779, 177216, 128838, 126894, 210076, 148407], [1984, 2122, 1760, 2059, 1278, 2017, 1443, 2223, 2169, 1502, 1274, 1740, 1740, 1768, 1295, 1916, 2249, 2036, 1886, 2010]) =&amp;gt; 4281855455197643306306491981973422080000\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 150, "id": "award_f44611f1-b89e-46dc-97fe-892280b13b82", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Thank you stranger. Shows the award.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Helpful", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png"}], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "bazy5j", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 171, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/bazy5j/20190408_challenge_377_easy_axisaligned_crate/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/bazy5j/20190408_challenge_377_easy_axisaligned_crate/", "subreddit_subscribers": 224296, "created_utc": 1554761779.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Background\n\n[The Revised Julian Calendar](https://www.timeanddate.com/calendar/revised-julian-calendar.html) is a calendar system very similar to the familiar Gregorian Calendar, but slightly more accurate in terms of average year length. The Revised Julian Calendar has a leap day on Feb 29th of leap years as follows:\n\n* Years that are evenly divisible by 4 are leap years.\n* Exception: Years that are evenly divisible by 100 are not leap years.\n* Exception to the exception: Years for which the remainder when divided by 900 is either 200 or 600 are leap years.\n\nFor instance, 2000 is an exception to the exception: the remainder when dividing 2000 by 900 is 200. So 2000 is a leap year in the Revised Julian Calendar.\n\n# Challenge\n\nGiven two positive year numbers (with the second one greater than or equal to the first), find out how many leap days (Feb 29ths) appear between Jan 1 of the first year, and Jan 1 of the second year in the Revised Julian Calendar. This is equivalent to asking how many leap years there are in the interval between the two years, including the first but excluding the second.\n\n    leaps(2016, 2017) =&gt; 1\n    leaps(2019, 2020) =&gt; 0\n    leaps(1900, 1901) =&gt; 0\n    leaps(2000, 2001) =&gt; 1\n    leaps(2800, 2801) =&gt; 0\n    leaps(123456, 123456) =&gt; 0\n    leaps(1234, 5678) =&gt; 1077\n    leaps(123456, 7891011) =&gt; 1881475\n\nFor this challenge, you must handle very large years efficiently, much faster than checking each year in the range.\n\n    leaps(123456789101112, 1314151617181920) =&gt; 288412747246240\n\n# Optional bonus\n\nSome day in the distant future, the Gregorian Calendar and the Revised Julian Calendar will agree that the day is Feb 29th, but they'll disagree about what year it is. Find the first such year (efficiently).", "author_fullname": "t2_626wj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2019-03-13] Challenge #376 [Intermediate] The Revised Julian Calendar", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_b0nuoh", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 104, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 104, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1552493889.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Background&lt;/h1&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.timeanddate.com/calendar/revised-julian-calendar.html\"&gt;The Revised Julian Calendar&lt;/a&gt; is a calendar system very similar to the familiar Gregorian Calendar, but slightly more accurate in terms of average year length. The Revised Julian Calendar has a leap day on Feb 29th of leap years as follows:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Years that are evenly divisible by 4 are leap years.&lt;/li&gt;\n&lt;li&gt;Exception: Years that are evenly divisible by 100 are not leap years.&lt;/li&gt;\n&lt;li&gt;Exception to the exception: Years for which the remainder when divided by 900 is either 200 or 600 are leap years.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;For instance, 2000 is an exception to the exception: the remainder when dividing 2000 by 900 is 200. So 2000 is a leap year in the Revised Julian Calendar.&lt;/p&gt;\n\n&lt;h1&gt;Challenge&lt;/h1&gt;\n\n&lt;p&gt;Given two positive year numbers (with the second one greater than or equal to the first), find out how many leap days (Feb 29ths) appear between Jan 1 of the first year, and Jan 1 of the second year in the Revised Julian Calendar. This is equivalent to asking how many leap years there are in the interval between the two years, including the first but excluding the second.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;leaps(2016, 2017) =&amp;gt; 1\nleaps(2019, 2020) =&amp;gt; 0\nleaps(1900, 1901) =&amp;gt; 0\nleaps(2000, 2001) =&amp;gt; 1\nleaps(2800, 2801) =&amp;gt; 0\nleaps(123456, 123456) =&amp;gt; 0\nleaps(1234, 5678) =&amp;gt; 1077\nleaps(123456, 7891011) =&amp;gt; 1881475\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;For this challenge, you must handle very large years efficiently, much faster than checking each year in the range.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;leaps(123456789101112, 1314151617181920) =&amp;gt; 288412747246240\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Optional bonus&lt;/h1&gt;\n\n&lt;p&gt;Some day in the distant future, the Gregorian Calendar and the Revised Julian Calendar will agree that the day is Feb 29th, but they&amp;#39;ll disagree about what year it is. Find the first such year (efficiently).&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 3", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "b0nuoh", "is_robot_indexable": true, "report_reasons": null, "author": "Cosmologicon", "discussion_type": null, "num_comments": 85, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/b0nuoh/20190313_challenge_376_intermediate_the_revised/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/b0nuoh/20190313_challenge_376_intermediate_the_revised/", "subreddit_subscribers": 224296, "created_utc": 1552493889.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "dailyprogrammer", "selftext": "# Description\n\nWe'll focus in this challenge on what's called a _complete graph_, wherein every node is expressly connected to every other node. We'll also work assuming an undirected graph, that relationships are reciprocal. \n\nIn social network analysis, you can analyze for _structural balance_ - a configuration wherein you'll find local stability. The easy one is when everyone enjoys a positive relationship with everyone else - they're all friends. Another structurally balanced scenario is when you have - in a graph of three nodes - two friends and each with a shared enemy, so one positive relationship and two negative ones. \n\nWith larger graphs, you can continue this analysis by analyzing every three node subgraph and ensuring it has those properties - all positive or one positive and two negative relationsgips. \n\nA structurally balanced graph doesn't indicate complete future stability, just local stability - remember, factions can arise in these networks, akin to the Axis and Allies scenario of WW1 and WW2. \n\nToday's challenge is to take a graph and identify if the graph is structurally balanced. This has great applicability to social network analysis, and can easily be applied to stuff like fictional universes like the Game of Thrones and the real world based on news events. \n\n# Example Input\n\nYou'll be given a graph in the following format: the first line contains two integers, _N_ and _M_, telling you how many nodes and edges to load, respectively. The next _M_ lines tell you relationships, positive (friendly, denoted by `++`) or negative (foes, denoted by `--`). Example (from a subset of the Legion of Doom and Justice League):\n\n    6 15\n    Superman ++ Green Lantern\n    Superman ++ Wonder Woman\n    Superman -- Sinestro\n    Superman -- Cheetah\n    Superman -- Lex Luthor\n    Green Lantern ++ Wonder Woman\n    Green Lantern -- Sinestro\n    Green Lantern -- Cheetah\n    Green Lantern -- Lex Luthor\n    Wonder Woman -- Sinestro\n    Wonder Woman -- Cheetah\n    Wonder Woman -- Lex Luthor\n    Sinestro ++ Cheetah\n    Sinestro ++ Lex Luthor\n    Cheetah ++ Lex Luthor\n\n# Example Output\n\nYour program should emit if the graph is structurally balanced or not. Example:\n\n    balanced\n\n# Challenge Input\n\nThis is the Game of Thrones Season 7 house list I found via [this list of alliances on the Vulture website](http://www.vulture.com/2017/08/game-of-thrones-season-7-alliances.html) - I don't watch GoT so I have no idea if I captured this right. \n\n    120 16\n    Daenerys Targaryen ++ Jon Snow\n    Daenerys Targaryen ++ Tyrion Lannister\n    Daenerys Targaryen ++ Varys\n    Daenerys Targaryen ++ Jorah Mormont\n    Daenerys Targaryen ++ Beric Dondarrion\n    Daenerys Targaryen ++ Sandor \u201cthe Hound\u201d Clegane\n    Daenerys Targaryen ++ Theon and Yara Greyjoy\n    Daenerys Targaryen -- Sansa Stark\n    Daenerys Targaryen -- Arya Stark\n    Daenerys Targaryen -- Bran Stark\n    Daenerys Targaryen -- The Lords of the North and the Vale\n    Daenerys Targaryen -- Littlefinger\n    Daenerys Targaryen -- Cersei Lannister\n    Daenerys Targaryen -- Jaime Lannister\n    Daenerys Targaryen -- Euron Greyjoy\n    Jon Snow ++ Tyrion Lannister\n    Jon Snow ++ Varys\n    Jon Snow ++ Jorah Mormont\n    Jon Snow ++ Beric Dondarrion\n    Jon Snow ++ Sandor \u201cthe Hound\u201d Clegane\n    Jon Snow -- Theon and Yara Greyjoy\n    Jon Snow -- Sansa Stark\n    Jon Snow -- Arya Stark\n    Jon Snow -- Bran Stark\n    Jon Snow -- The Lords of the North and the Vale\n    Jon Snow -- Littlefinger\n    Jon Snow -- Cersei Lannister\n    Jon Snow -- Jaime Lannister\n    Jon Snow -- Euron Greyjoy\n    Tyrion Lannister ++ Varys\n    Tyrion Lannister ++ Jorah Mormont\n    Tyrion Lannister ++ Beric Dondarrion\n    Tyrion Lannister ++ Sandor \u201cthe Hound\u201d Clegane\n    Tyrion Lannister ++ Theon and Yara Greyjoy\n    Tyrion Lannister -- Sansa Stark\n    Tyrion Lannister -- Arya Stark\n    Tyrion Lannister -- Bran Stark\n    Tyrion Lannister -- The Lords of the North and the Vale\n    Tyrion Lannister -- Littlefinger\n    Tyrion Lannister -- Cersei Lannister\n    Tyrion Lannister -- Jaime Lannister\n    Tyrion Lannister -- Euron Greyjoy\n    Varys ++ Jorah Mormont\n    Varys ++ Beric Dondarrion\n    Varys ++ Sandor \u201cthe Hound\u201d Clegane\n    Varys ++ Theon and Yara Greyjoy\n    Varys -- Sansa Stark\n    Varys -- Arya Stark\n    Varys -- Bran Stark\n    Varys -- The Lords of the North and the Vale\n    Varys -- Littlefinger\n    Varys -- Cersei Lannister\n    Varys -- Jaime Lannister\n    Varys -- Euron Greyjoy\n    Jorah Mormont ++ Beric Dondarrion\n    Jorah Mormont ++ Sandor \u201cthe Hound\u201d Clegane\n    Jorah Mormont ++ Theon and Yara Greyjoy\n    Jorah Mormont -- Sansa Stark\n    Jorah Mormont -- Arya Stark\n    Jorah Mormont -- Bran Stark\n    Jorah Mormont -- The Lords of the North and the Vale\n    Jorah Mormont -- Littlefinger\n    Jorah Mormont -- Cersei Lannister\n    Jorah Mormont -- Jaime Lannister\n    Jorah Mormont -- Euron Greyjoy\n    Beric Dondarrion ++ Sandor \u201cthe Hound\u201d Clegane\n    Beric Dondarrion ++ Theon and Yara Greyjoy\n    Beric Dondarrion -- Sansa Stark\n    Beric Dondarrion -- Arya Stark\n    Beric Dondarrion -- Bran Stark\n    Beric Dondarrion -- The Lords of the North and the Vale\n    Beric Dondarrion -- Littlefinger\n    Beric Dondarrion -- Cersei Lannister\n    Beric Dondarrion -- Jaime Lannister\n    Beric Dondarrion -- Euron Greyjoy\n    Sandor \u201cthe Hound\u201d Clegane ++ Theon and Yara Greyjoy\n    Sandor \u201cthe Hound\u201d Clegane -- Sansa Stark\n    Sandor \u201cthe Hound\u201d Clegane -- Arya Stark\n    Sandor \u201cthe Hound\u201d Clegane -- Bran Stark\n    Sandor \u201cthe Hound\u201d Clegane -- The Lords of the North and the Vale\n    Sandor \u201cthe Hound\u201d Clegane -- Littlefinger\n    Sandor \u201cthe Hound\u201d Clegane -- Cersei Lannister\n    Sandor \u201cthe Hound\u201d Clegane -- Jaime Lannister\n    Sandor \u201cthe Hound\u201d Clegane -- Euron Greyjoy\n    Theon and Yara Greyjoy -- Sansa Stark\n    Theon and Yara Greyjoy -- Arya Stark\n    Theon and Yara Greyjoy -- Bran Stark\n    Theon and Yara Greyjoy -- The Lords of the North and the Vale\n    Theon and Yara Greyjoy -- Littlefinger\n    Theon and Yara Greyjoy -- Cersei Lannister\n    Theon and Yara Greyjoy -- Jaime Lannister\n    Theon and Yara Greyjoy -- Euron Greyjoy\n    Sansa Stark ++ Arya Stark\n    Sansa Stark ++ Bran Stark\n    Sansa Stark ++ The Lords of the North and the Vale\n    Sansa Stark ++ Littlefinger\n    Sansa Stark -- Cersei Lannister\n    Sansa Stark -- Jaime Lannister\n    Sansa Stark -- Euron Greyjoy\n    Arya Stark ++ Bran Stark\n    Arya Stark ++ The Lords of the North and the Vale\n    Arya Stark ++ Littlefinger\n    Arya Stark -- Cersei Lannister\n    Arya Stark -- Jaime Lannister\n    Arya Stark -- Euron Greyjoy\n    Bran Stark ++ The Lords of the North and the Vale\n    Bran Stark -- Littlefinger\n    Bran Stark -- Cersei Lannister\n    Bran Stark -- Jaime Lannister\n    Bran Stark -- Euron Greyjoy\n    The Lords of the North and the Vale ++ Littlefinger\n    The Lords of the North and the Vale -- Cersei Lannister\n    The Lords of the North and the Vale -- Jaime Lannister\n    The Lords of the North and the Vale -- Euron Greyjoy\n    Littlefinger -- Cersei Lannister\n    Littlefinger -- Jaime Lannister\n    Littlefinger -- Euron Greyjoy\n    Cersei Lannister ++ Jaime Lannister\n    Cersei Lannister ++ Euron Greyjoy\n    Jaime Lannister ++ Euron Greyjoy\n\n# Notes\n\nYou can learn more about the ideas behind this challenge in these resources:\n\n* [Positive and Negative Relationships](https://courses.cit.cornell.edu/info204_2007sp/balance.pdf), in D. Easley and J. Kleinberg. Networks, Crowds, and Markets: Reasoning about a Highly Connected World (2010). \n* [Network Mathematics and Rival Factions](https://www.youtube.com/watch?v=qEKNFOaGQcc) from the PBS Digital YouTube channel Infinite Series. It was this video that inspired this challenge. \n* [The Graph of Thrones \\[Season 7 Contest\\]](https://neo4j.com/blog/graph-of-thrones/), from the Neo4j site referencing how to use their software to answer a Kaggle challenge about predicting GoT's future. \n", "author_fullname": "t2_8ls88", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[2019-02-15] Challenge #375 [Hard] Graph of Thrones", "link_flair_richtext": [], "subreddit_name_prefixed": "r/dailyprogrammer", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_aqwvxo", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": "", "subreddit_type": "restricted", "ups": 121, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 121, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "", "edited": 1550244200.0, "author_flair_css_class": "DefaultFlair", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1550239675.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.dailyprogrammer", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;We&amp;#39;ll focus in this challenge on what&amp;#39;s called a &lt;em&gt;complete graph&lt;/em&gt;, wherein every node is expressly connected to every other node. We&amp;#39;ll also work assuming an undirected graph, that relationships are reciprocal. &lt;/p&gt;\n\n&lt;p&gt;In social network analysis, you can analyze for &lt;em&gt;structural balance&lt;/em&gt; - a configuration wherein you&amp;#39;ll find local stability. The easy one is when everyone enjoys a positive relationship with everyone else - they&amp;#39;re all friends. Another structurally balanced scenario is when you have - in a graph of three nodes - two friends and each with a shared enemy, so one positive relationship and two negative ones. &lt;/p&gt;\n\n&lt;p&gt;With larger graphs, you can continue this analysis by analyzing every three node subgraph and ensuring it has those properties - all positive or one positive and two negative relationsgips. &lt;/p&gt;\n\n&lt;p&gt;A structurally balanced graph doesn&amp;#39;t indicate complete future stability, just local stability - remember, factions can arise in these networks, akin to the Axis and Allies scenario of WW1 and WW2. &lt;/p&gt;\n\n&lt;p&gt;Today&amp;#39;s challenge is to take a graph and identify if the graph is structurally balanced. This has great applicability to social network analysis, and can easily be applied to stuff like fictional universes like the Game of Thrones and the real world based on news events. &lt;/p&gt;\n\n&lt;h1&gt;Example Input&lt;/h1&gt;\n\n&lt;p&gt;You&amp;#39;ll be given a graph in the following format: the first line contains two integers, &lt;em&gt;N&lt;/em&gt; and &lt;em&gt;M&lt;/em&gt;, telling you how many nodes and edges to load, respectively. The next &lt;em&gt;M&lt;/em&gt; lines tell you relationships, positive (friendly, denoted by &lt;code&gt;++&lt;/code&gt;) or negative (foes, denoted by &lt;code&gt;--&lt;/code&gt;). Example (from a subset of the Legion of Doom and Justice League):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;6 15\nSuperman ++ Green Lantern\nSuperman ++ Wonder Woman\nSuperman -- Sinestro\nSuperman -- Cheetah\nSuperman -- Lex Luthor\nGreen Lantern ++ Wonder Woman\nGreen Lantern -- Sinestro\nGreen Lantern -- Cheetah\nGreen Lantern -- Lex Luthor\nWonder Woman -- Sinestro\nWonder Woman -- Cheetah\nWonder Woman -- Lex Luthor\nSinestro ++ Cheetah\nSinestro ++ Lex Luthor\nCheetah ++ Lex Luthor\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Example Output&lt;/h1&gt;\n\n&lt;p&gt;Your program should emit if the graph is structurally balanced or not. Example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;balanced\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Challenge Input&lt;/h1&gt;\n\n&lt;p&gt;This is the Game of Thrones Season 7 house list I found via &lt;a href=\"http://www.vulture.com/2017/08/game-of-thrones-season-7-alliances.html\"&gt;this list of alliances on the Vulture website&lt;/a&gt; - I don&amp;#39;t watch GoT so I have no idea if I captured this right. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;120 16\nDaenerys Targaryen ++ Jon Snow\nDaenerys Targaryen ++ Tyrion Lannister\nDaenerys Targaryen ++ Varys\nDaenerys Targaryen ++ Jorah Mormont\nDaenerys Targaryen ++ Beric Dondarrion\nDaenerys Targaryen ++ Sandor \u201cthe Hound\u201d Clegane\nDaenerys Targaryen ++ Theon and Yara Greyjoy\nDaenerys Targaryen -- Sansa Stark\nDaenerys Targaryen -- Arya Stark\nDaenerys Targaryen -- Bran Stark\nDaenerys Targaryen -- The Lords of the North and the Vale\nDaenerys Targaryen -- Littlefinger\nDaenerys Targaryen -- Cersei Lannister\nDaenerys Targaryen -- Jaime Lannister\nDaenerys Targaryen -- Euron Greyjoy\nJon Snow ++ Tyrion Lannister\nJon Snow ++ Varys\nJon Snow ++ Jorah Mormont\nJon Snow ++ Beric Dondarrion\nJon Snow ++ Sandor \u201cthe Hound\u201d Clegane\nJon Snow -- Theon and Yara Greyjoy\nJon Snow -- Sansa Stark\nJon Snow -- Arya Stark\nJon Snow -- Bran Stark\nJon Snow -- The Lords of the North and the Vale\nJon Snow -- Littlefinger\nJon Snow -- Cersei Lannister\nJon Snow -- Jaime Lannister\nJon Snow -- Euron Greyjoy\nTyrion Lannister ++ Varys\nTyrion Lannister ++ Jorah Mormont\nTyrion Lannister ++ Beric Dondarrion\nTyrion Lannister ++ Sandor \u201cthe Hound\u201d Clegane\nTyrion Lannister ++ Theon and Yara Greyjoy\nTyrion Lannister -- Sansa Stark\nTyrion Lannister -- Arya Stark\nTyrion Lannister -- Bran Stark\nTyrion Lannister -- The Lords of the North and the Vale\nTyrion Lannister -- Littlefinger\nTyrion Lannister -- Cersei Lannister\nTyrion Lannister -- Jaime Lannister\nTyrion Lannister -- Euron Greyjoy\nVarys ++ Jorah Mormont\nVarys ++ Beric Dondarrion\nVarys ++ Sandor \u201cthe Hound\u201d Clegane\nVarys ++ Theon and Yara Greyjoy\nVarys -- Sansa Stark\nVarys -- Arya Stark\nVarys -- Bran Stark\nVarys -- The Lords of the North and the Vale\nVarys -- Littlefinger\nVarys -- Cersei Lannister\nVarys -- Jaime Lannister\nVarys -- Euron Greyjoy\nJorah Mormont ++ Beric Dondarrion\nJorah Mormont ++ Sandor \u201cthe Hound\u201d Clegane\nJorah Mormont ++ Theon and Yara Greyjoy\nJorah Mormont -- Sansa Stark\nJorah Mormont -- Arya Stark\nJorah Mormont -- Bran Stark\nJorah Mormont -- The Lords of the North and the Vale\nJorah Mormont -- Littlefinger\nJorah Mormont -- Cersei Lannister\nJorah Mormont -- Jaime Lannister\nJorah Mormont -- Euron Greyjoy\nBeric Dondarrion ++ Sandor \u201cthe Hound\u201d Clegane\nBeric Dondarrion ++ Theon and Yara Greyjoy\nBeric Dondarrion -- Sansa Stark\nBeric Dondarrion -- Arya Stark\nBeric Dondarrion -- Bran Stark\nBeric Dondarrion -- The Lords of the North and the Vale\nBeric Dondarrion -- Littlefinger\nBeric Dondarrion -- Cersei Lannister\nBeric Dondarrion -- Jaime Lannister\nBeric Dondarrion -- Euron Greyjoy\nSandor \u201cthe Hound\u201d Clegane ++ Theon and Yara Greyjoy\nSandor \u201cthe Hound\u201d Clegane -- Sansa Stark\nSandor \u201cthe Hound\u201d Clegane -- Arya Stark\nSandor \u201cthe Hound\u201d Clegane -- Bran Stark\nSandor \u201cthe Hound\u201d Clegane -- The Lords of the North and the Vale\nSandor \u201cthe Hound\u201d Clegane -- Littlefinger\nSandor \u201cthe Hound\u201d Clegane -- Cersei Lannister\nSandor \u201cthe Hound\u201d Clegane -- Jaime Lannister\nSandor \u201cthe Hound\u201d Clegane -- Euron Greyjoy\nTheon and Yara Greyjoy -- Sansa Stark\nTheon and Yara Greyjoy -- Arya Stark\nTheon and Yara Greyjoy -- Bran Stark\nTheon and Yara Greyjoy -- The Lords of the North and the Vale\nTheon and Yara Greyjoy -- Littlefinger\nTheon and Yara Greyjoy -- Cersei Lannister\nTheon and Yara Greyjoy -- Jaime Lannister\nTheon and Yara Greyjoy -- Euron Greyjoy\nSansa Stark ++ Arya Stark\nSansa Stark ++ Bran Stark\nSansa Stark ++ The Lords of the North and the Vale\nSansa Stark ++ Littlefinger\nSansa Stark -- Cersei Lannister\nSansa Stark -- Jaime Lannister\nSansa Stark -- Euron Greyjoy\nArya Stark ++ Bran Stark\nArya Stark ++ The Lords of the North and the Vale\nArya Stark ++ Littlefinger\nArya Stark -- Cersei Lannister\nArya Stark -- Jaime Lannister\nArya Stark -- Euron Greyjoy\nBran Stark ++ The Lords of the North and the Vale\nBran Stark -- Littlefinger\nBran Stark -- Cersei Lannister\nBran Stark -- Jaime Lannister\nBran Stark -- Euron Greyjoy\nThe Lords of the North and the Vale ++ Littlefinger\nThe Lords of the North and the Vale -- Cersei Lannister\nThe Lords of the North and the Vale -- Jaime Lannister\nThe Lords of the North and the Vale -- Euron Greyjoy\nLittlefinger -- Cersei Lannister\nLittlefinger -- Jaime Lannister\nLittlefinger -- Euron Greyjoy\nCersei Lannister ++ Jaime Lannister\nCersei Lannister ++ Euron Greyjoy\nJaime Lannister ++ Euron Greyjoy\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;h1&gt;Notes&lt;/h1&gt;\n\n&lt;p&gt;You can learn more about the ideas behind this challenge in these resources:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://courses.cit.cornell.edu/info204_2007sp/balance.pdf\"&gt;Positive and Negative Relationships&lt;/a&gt;, in D. Easley and J. Kleinberg. Networks, Crowds, and Markets: Reasoning about a Highly Connected World (2010). &lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://www.youtube.com/watch?v=qEKNFOaGQcc\"&gt;Network Mathematics and Rival Factions&lt;/a&gt; from the PBS Digital YouTube channel Infinite Series. It was this video that inspired this challenge. &lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://neo4j.com/blog/graph-of-thrones/\"&gt;The Graph of Thrones [Season 7 Contest]&lt;/a&gt;, from the Neo4j site referencing how to use their software to answer a Kaggle challenge about predicting GoT&amp;#39;s future. &lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": true, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": true, "spoiler": false, "locked": false, "author_flair_text": "2 0", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2tj45", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "aqwvxo", "is_robot_indexable": true, "report_reasons": null, "author": "jnazario", "discussion_type": null, "num_comments": 50, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/dailyprogrammer/comments/aqwvxo/20190215_challenge_375_hard_graph_of_thrones/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/dailyprogrammer/comments/aqwvxo/20190215_challenge_375_hard_graph_of_thrones/", "subreddit_subscribers": 224296, "created_utc": 1550239675.0, "num_crossposts": 0, "media": null, "is_video": false}}], "before": "t3_oirb5v"}}